/* The following code was generated by JFlex 1.4.3 on 11/8/15 4:30 PM */

/***************************/
/* FILE NAME: LEX_FILE.lex */
/***************************/

/***************************/
/* AUTHOR: OREN ISH SHALOM */
/***************************/
/**/
/*************/
/* USER CODE */
/*************/
   
import java_cup.runtime.*;

/******************************/
/* DOLAR DOLAR - DON'T TOUCH! */
/******************************/
      

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\50\1\7"+
    "\2\0\1\54\1\41\1\0\1\43\1\57\1\15\1\16\1\31\1\53"+
    "\1\34\1\14\1\4\11\5\1\0\1\60\1\52\1\17\1\40\2\0"+
    "\32\13\1\42\1\10\1\55\1\0\1\6\1\0\1\24\1\20\1\27"+
    "\1\36\1\23\1\37\1\45\1\46\1\32\1\6\1\26\1\22\1\6"+
    "\1\12\1\21\2\6\1\25\1\30\1\11\1\33\1\61\1\47\1\35"+
    "\2\6\1\44\1\51\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\6\4\1\12\1\4\1\13"+
    "\1\4\1\14\1\1\1\15\1\16\1\17\1\4\1\20"+
    "\1\1\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\0\1\30\1\0\4\4\1\0\2\31\1\32"+
    "\12\4\1\33\1\4\1\34\1\35\1\4\1\36\1\37"+
    "\1\40\3\4\1\41\1\4\1\2\2\0\12\4\1\42"+
    "\3\4\1\43\1\44\1\45\1\2\3\4\1\46\10\4"+
    "\1\47\1\4\1\50\4\4\1\51\2\4\1\52\1\53"+
    "\1\4\1\54\1\4\1\55\1\4\1\56\1\57\1\60"+
    "\1\61\1\4\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\62\0\226\0\310\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\62\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\62\0\u0384\0\62"+
    "\0\u03b6\0\u03e8\0\u041a\0\62\0\62\0\62\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\u0514\0\372\0\62\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\62\0\62\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\310\0\u0898"+
    "\0\62\0\62\0\u08ca\0\62\0\62\0\62\0\u08fc\0\u092e"+
    "\0\u0960\0\310\0\u0992\0\u0640\0\u0672\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\310\0\u0bea\0\u0c1c\0\u0c4e\0\310\0\310\0\310\0\u0672"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\310\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\310\0\u0ea6\0\310\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\310\0\u0fa0\0\u0fd2\0\310\0\310"+
    "\0\u1004\0\310\0\u1036\0\310\0\u1068\0\310\0\310\0\310"+
    "\0\310\0\u109a\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\7\1\21\1\22\1\7\1\23\1\7\1\24\1\25"+
    "\1\26\1\27\1\7\1\30\2\7\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\7\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\64\0"+
    "\1\4\63\0\2\6\60\0\3\7\2\0\3\7\4\0"+
    "\11\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\7\52\1\53\1\54\51\52\4\0\3\7\2\0"+
    "\3\7\4\0\5\7\1\55\3\7\1\0\2\7\1\0"+
    "\3\7\5\0\1\7\1\56\1\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\3\7\1\57\5\7\1\0"+
    "\1\7\1\60\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\13\2\0\3\13\4\0\11\13\1\0\2\13"+
    "\1\0\3\13\5\0\3\13\11\0\1\13\14\0\1\61"+
    "\1\62\60\0\1\63\64\0\1\64\46\0\3\7\2\0"+
    "\3\7\4\0\1\7\1\65\3\7\1\66\3\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\3\7\1\67\5\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\2\7\1\70\6\7\1\0"+
    "\2\7\1\0\1\71\2\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\3\7\1\72\5\7"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\1\7\1\73\1\74"+
    "\6\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\1\75\2\7\4\0\11\7"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\1\7\1\76\1\7\4\0\11\7"+
    "\1\0\2\7\1\0\2\7\1\77\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\3\7\4\0\4\7\1\100"+
    "\4\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\17\0\1\101\103\0\1\102\24\0\3\7\2\0"+
    "\3\7\4\0\11\7\1\0\2\7\1\0\3\7\5\0"+
    "\1\7\1\103\1\7\11\0\1\7\17\0\1\104\113\0"+
    "\1\105\27\0\1\106\46\0\3\7\2\0\3\7\4\0"+
    "\1\7\1\107\7\7\1\0\2\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\7\0\4\52\53\0\3\7\2\0"+
    "\3\7\4\0\11\7\1\0\1\7\1\110\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\11\7\1\0\1\111\1\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\4\0\3\7\2\0\3\7\4\0"+
    "\11\7\1\0\2\7\1\0\3\7\5\0\2\7\1\112"+
    "\11\0\1\7\4\0\3\7\2\0\3\7\4\0\2\7"+
    "\1\113\6\7\1\0\2\7\1\0\3\7\5\0\3\7"+
    "\11\0\1\7\1\61\1\114\1\4\57\61\15\115\1\116"+
    "\44\115\4\0\3\7\2\0\3\7\4\0\1\7\1\117"+
    "\7\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\3\7\4\0\3\7\1\120"+
    "\5\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\1\7\1\121\1\7\4\0"+
    "\11\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\3\7\4\0\10\7\1\122"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\1\123\2\7\4\0\11\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\1\124\2\7\4\0\11\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\1\7\1\125\1\7\4\0\11\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\4\7\1\126\4\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\4\7\1\127\1\130\3\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\1\131\2\7\4\0\11\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\2\7\1\132\6\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\11\7\1\0\1\133\1\7\1\0"+
    "\3\7\5\0\3\7\11\0\1\7\4\0\3\7\2\0"+
    "\3\7\4\0\11\7\1\0\1\134\1\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\3\7\1\135\5\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\10\7\1\136\1\0\2\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\4\0\3\7\2\0\3\7\4\0"+
    "\2\7\1\137\6\7\1\0\2\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\14\115\1\140\1\116\44\115\4\0"+
    "\3\7\2\0\3\7\4\0\2\7\1\141\6\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\4\7\1\142\4\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\11\7\1\0\2\7\1\0"+
    "\3\7\5\0\1\143\2\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\3\7\1\144\5\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\3\7\1\145\5\7\1\0\2\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\11\7\1\0\1\7\1\146\1\0"+
    "\3\7\5\0\3\7\11\0\1\7\4\0\3\7\2\0"+
    "\1\147\2\7\4\0\11\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\10\7\1\150\1\0\2\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\4\0\3\7\2\0\1\151\2\7"+
    "\4\0\11\7\1\0\2\7\1\0\3\7\5\0\3\7"+
    "\11\0\1\7\4\0\3\7\2\0\3\7\4\0\11\7"+
    "\1\0\1\152\1\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\3\7\4\0\10\7\1\153"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\2\7\1\154\6\7"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\11\7\1\0\2\7"+
    "\1\0\1\7\1\155\1\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\3\7\1\156\5\7"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\3\7\4\0\6\7\1\157\2\7"+
    "\1\0\2\7\1\0\3\7\5\0\3\7\11\0\1\7"+
    "\4\0\3\7\2\0\1\160\2\7\4\0\11\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\1\7\1\161\1\7\4\0\11\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\5\7\1\162\3\7\1\0"+
    "\2\7\1\0\3\7\5\0\3\7\11\0\1\7\4\0"+
    "\3\7\2\0\3\7\4\0\11\7\1\0\1\163\1\7"+
    "\1\0\3\7\5\0\3\7\11\0\1\7\4\0\3\7"+
    "\2\0\3\7\4\0\10\7\1\164\1\0\2\7\1\0"+
    "\3\7\5\0\3\7\11\0\1\7\4\0\3\7\2\0"+
    "\3\7\4\0\11\7\1\0\1\165\1\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\1\7"+
    "\1\166\1\7\4\0\11\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\3\7\1\167\5\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\3\7\1\170\5\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\4\7\1\171\4\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\11\7\1\0\2\7\1\0\3\7\5\0\1\7"+
    "\1\172\1\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\11\7\1\0\2\7\1\0\1\7\1\173\1\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\1\7"+
    "\1\174\1\7\4\0\11\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\1\7"+
    "\1\175\1\7\4\0\11\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\7\7\1\176\1\7\1\0\2\7\1\0\3\7"+
    "\5\0\3\7\11\0\1\7\4\0\3\7\2\0\3\7"+
    "\4\0\11\7\1\0\2\7\1\0\3\7\5\0\1\177"+
    "\2\7\11\0\1\7\4\0\3\7\2\0\1\7\1\200"+
    "\1\7\4\0\11\7\1\0\2\7\1\0\3\7\5\0"+
    "\3\7\11\0\1\7\4\0\3\7\2\0\3\7\4\0"+
    "\10\7\1\201\1\0\2\7\1\0\3\7\5\0\3\7"+
    "\11\0\1\7\4\0\3\7\2\0\3\7\4\0\11\7"+
    "\1\0\1\7\1\202\1\0\3\7\5\0\3\7\11\0"+
    "\1\7\4\0\3\7\2\0\3\7\4\0\3\7\1\203"+
    "\5\7\1\0\2\7\1\0\3\7\5\0\3\7\11\0"+
    "\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\10\1\1\11\7\1\1\11"+
    "\1\1\1\11\3\1\3\11\4\1\6\11\1\1\1\0"+
    "\1\11\1\0\4\1\1\0\1\1\2\11\14\1\2\11"+
    "\1\1\3\11\6\1\2\0\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /*********************************************************************************/
    /* Create a new java_cup.runtime.Symbol with information about the current token */
    /*********************************************************************************/
    private Symbol symbol(int type)               {return new Symbol(type, (1+yyline), yycolumn);}
    private Symbol symbol(int type, Object value) {return new Symbol(type, (1+yyline), yycolumn, value);}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { System.out.println((1+yyline)+": RETURN");    return symbol(sym.RETURN);
          }
        case 51: break;
        case 41: 
          { System.out.println((1+yyline)+ ": CLASS");    return symbol(sym.CLASS);
          }
        case 52: break;
        case 34: 
          { System.out.println((1+yyline)+": INT");    return symbol(sym.INT);
          }
        case 53: break;
        case 47: 
          { System.out.println((1+yyline) +": STRING");	return symbol(sym.STRING);
          }
        case 54: break;
        case 20: 
          { System.out.println((1+yyline) + ": RB");    return symbol(sym.RB);
          }
        case 55: break;
        case 3: 
          { System.out.print((1+yyline) +": INTEGER(");
						System.out.print(yytext());
						System.out.println(")");
						return symbol(sym.NUMBER, new Integer(yytext()));
          }
        case 56: break;
        case 19: 
          { System.out.println((1+yyline)+": MOD");    return symbol(sym.MOD);
          }
        case 57: break;
        case 11: 
          { System.out.println((1+yyline) +": DOT");    return symbol(sym.DOT);
          }
        case 58: break;
        case 43: 
          { System.out.println((1+yyline) +": WHILE"); return symbol(sym.WHILE);
          }
        case 59: break;
        case 42: 
          { System.out.println((1+yyline)+ ": FALSE");    return symbol(sym.FALSE);
          }
        case 60: break;
        case 31: 
          { System.out.println((1+yyline)+": LOR");    return symbol(sym.LOR);
          }
        case 61: break;
        case 15: 
          { System.out.println((1+yyline)+": LCBR");    return symbol(sym.LCBR);
          }
        case 62: break;
        case 49: 
          { System.out.println((1+yyline)+ ": EXTENDS");    return symbol(sym.EXTENDS);
          }
        case 63: break;
        case 16: 
          { System.out.println((1+yyline)+": LNEG");    return symbol(sym.LNEG);
          }
        case 64: break;
        case 22: 
          { System.out.println((1+yyline)+": RP");    return symbol(sym.RP);
          }
        case 65: break;
        case 14: 
          { System.out.println((1+yyline)+": LP");    return symbol(sym.LP);
          }
        case 66: break;
        case 17: 
          { System.out.println((1+yyline)+": LT");    return symbol(sym.LT);
          }
        case 67: break;
        case 29: 
          { System.out.println((1+yyline)+": LAND");    return symbol(sym.LAND);
          }
        case 68: break;
        case 2: 
          { /* just skip what was found, do nothing */
          }
        case 69: break;
        case 27: 
          { System.out.println((1+yyline) +": IF");    return symbol(sym.IF);
          }
        case 70: break;
        case 44: 
          { System.out.println((1+yyline)+": LENGTH");    return symbol(sym.LENGTH);
          }
        case 71: break;
        case 28: 
          { System.out.println((1+yyline)+": GTE");    return symbol(sym.GTE);
          }
        case 72: break;
        case 21: 
          { System.out.println((1+yyline) +": RCBR");    return symbol(sym.RCBR);
          }
        case 73: break;
        case 26: 
          { System.out.println((1+yyline) +": EQUAL");    return symbol(sym.EQUAL);
          }
        case 74: break;
        case 32: 
          { System.out.println((1+yyline)+": LTE");    return symbol(sym.LTE);
          }
        case 75: break;
        case 18: 
          { System.out.println((1+yyline)+": MINUS");    return symbol(sym.MINUS);
          }
        case 76: break;
        case 33: 
          { System.out.println((1+yyline)+": NEW");    return symbol(sym.NEW);
          }
        case 77: break;
        case 5: 
          { System.out.print((1+yyline)+": CLASS_ID(");
						System.out.print(yytext());
						System.out.println(")");
						return symbol(sym.CLASS_ID, new String(yytext()));
          }
        case 78: break;
        case 38: 
          { System.out.println((1+yyline) +": ELSE");    return symbol(sym.ELSE);
          }
        case 79: break;
        case 25: 
          { System.err.println((1+yyline)+": Lexical error: Unfinished comment."); 
	System.exit(0);
          }
        case 80: break;
        case 6: 
          { System.out.println((1+yyline) +": DIVIDE ");    return symbol(sym.DIVIDE);
          }
        case 81: break;
        case 35: 
          { System.out.println((1+yyline) +": TRUE");	return symbol(sym.TRUE);
          }
        case 82: break;
        case 46: 
          { System.out.println((1+yyline) +": STATIC");	return symbol(sym.STATIC);
          }
        case 83: break;
        case 9: 
          { System.out.println((1+yyline)+": ASSIGN");    return symbol(sym.ASSIGN);
          }
        case 84: break;
        case 10: 
          { System.out.println((1+yyline)+": COMMA");    return symbol(sym.COMMA);
          }
        case 85: break;
        case 13: 
          { System.out.println((1+yyline)+": LB");    return symbol(sym.LB);
          }
        case 86: break;
        case 37: 
          { System.out.println((1+yyline) +": NULL");    return symbol(sym.NULL);
          }
        case 87: break;
        case 30: 
          { System.out.println((1+yyline) +": NEQUAL");    return symbol(sym.NEQUAL);
          }
        case 88: break;
        case 24: 
          { System.out.print((1+yyline) +": QUOTE(");
						System.out.print(yytext());
						System.out.println(")");
						return symbol(sym.QUOTE, new String(yytext()));
          }
        case 89: break;
        case 50: 
          { System.out.println((1+yyline) +": CONTINUE");    return symbol(sym.CONTINUE);
          }
        case 90: break;
        case 39: 
          { System.out.println((1+yyline) +": VOID");	return symbol(sym.VOID);
          }
        case 91: break;
        case 48: 
          { System.out.println((1+yyline)+": BOOLEAN");    return symbol(sym.BOOLEAN);
          }
        case 92: break;
        case 12: 
          { System.out.println((1+yyline)+": GT");    return symbol(sym.GT);
          }
        case 93: break;
        case 36: 
          { System.out.println((1+yyline) +": THIS");	return symbol(sym.THIS);
          }
        case 94: break;
        case 7: 
          { System.out.println((1+yyline)+": MULTIPLY");    return symbol(sym.MULTIPLY);
          }
        case 95: break;
        case 1: 
          { //if default rule was matched, report error.
	System.err.println((1+yyline)+": Lexical error: illegal character '"+ yytext()+"'"); 
	System.exit(0);
          }
        case 96: break;
        case 40: 
          { System.out.println((1+yyline)+ ": BREAK");    return symbol(sym.BREAK);
          }
        case 97: break;
        case 4: 
          { System.out.print((1+yyline) +": ID(");
						System.out.print(yytext());
						System.out.println(")");
						return symbol(sym.ID, new String(yytext()));
          }
        case 98: break;
        case 23: 
          { System.out.println((1+yyline)+": SEMI");    return symbol(sym.SEMI);
          }
        case 99: break;
        case 8: 
          { System.out.println((1+yyline)+": PLUS");     return symbol(sym.PLUS);
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              System.out.print((2+yyline) +": EOF");	System.exit(0);
            }
            case 132: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
