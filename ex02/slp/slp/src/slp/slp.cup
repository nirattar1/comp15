package slp;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
	

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s)  {
		Token tok = (Token) s;
		System.out.println(" Line " + tok.getLine()+": Syntax error; unexpected " + tok);
		try{
			printToDebugFile();
		}
		catch (IOException e){
			System.out.println("Writing debug file failed");
		}
	
	}
	
	
	StringBuffer debugs=new StringBuffer("");
		
	public void printToDebugFile() throws IOException{
	File file = new File("debug.txt");	
	// if file doesnt exists, then create it
	if (!file.exists()) {
		file.createNewFile();
	}
	
	FileWriter fw = new FileWriter(file.getAbsoluteFile());
	BufferedWriter bw = new BufferedWriter(fw);
	bw.write(debugs.toString());
	bw.close();
	}
	
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};


terminal Integer NUMBER;
terminal String VAR;		// == ID (called this way in spec.)
terminal String CLASS_ID;
terminal UMINUS;
terminal PLUS;
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal CONTINUE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal IF;
terminal INT;
terminal LAND;
terminal LB;
terminal LPAREN;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal MINUS;
terminal MOD;
terminal NEQUAL;
terminal NULL;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RPAREN;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal String QUOTE;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;
terminal MULT;
terminal DIV;
terminal GE;
terminal LE;


non terminal Program program;
non terminal Class classDecl;
non terminal List<Class> classDeclList;
non terminal Field field;
non terminal Method method;
non terminal Method methodDecl;
non terminal FieldMethodList fieldMethodList;
non terminal List<VarExpr> idList ;
non terminal Formal formal;
non terminal FormalsList formalList;
non terminal Location location;
non terminal Expr expr;
non terminal Stmt stmt;
non terminal StmtList stmt_list;
non terminal Type type;
non terminal List<Expr> args_list;
non terminal Call call;
non terminal CallVirtual virtualCall;
non terminal CallStatic staticCall;
non terminal Literal literal;
non terminal Operator binop;



precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS; 
precedence left MULT, DIV, MOD;
precedence right UMINUS, LNEG;
precedence left LB, RB, LPAREN, RPAREN, DOT;
precedence left IF, ELSE;


start with program;


program ::= classDeclList:cdl
{:
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDeclList'");
	RESULT= new Program(cdlleft, cdl);
	parser.printToDebugFile();
:}
 | 
 {:
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule '' (empty program");
	RESULT= new Program(parser.getLine());
	parser.printToDebugFile();
:}
;

classDeclList ::= classDeclList:cdl classDecl:cd
{:
	cdl.add(cd); RESULT= cdl;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDeclList COMMA classDecl'");
:} | 
classDecl:c {:
		List <Class> l= new ArrayList<Class> (cleft);
		l.add(c);
		RESULT=l;
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDecl'");
:}
;

//class declaration.
//NOTE: by spec. a class id starts with uppercase.
classDecl ::= CLASS CLASS_ID:cid LCBR fieldMethodList:fml RCBR 
			{: 
				RESULT= new Class (cidleft, cid, fml);
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: CLASS CLASS_ID LCBR fieldMethodList RCBR");
			:} |
			CLASS CLASS_ID:cid EXTENDS CLASS_ID:ecid LCBR fieldMethodList:fml RCBR
			{:
				RESULT= new Class (cidleft, cid, ecid, fml);
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR");
			:}
;


fieldMethodList ::= field:f fieldMethodList:fmList  {:
				fmList.addFieldMethod(f); RESULT = fmList; 
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: field fieldMethodList");
		:} |
		method:m fieldMethodList:fmList {:
				fmList.addFieldMethod(m); RESULT = fmList; 
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: method fieldMethodList");
		:} |
  		 field:f {:
		 	RESULT = new FieldMethodList(fleft, f);
		 	parser.debugs.append("\n" + parser.getLine()+" Reduced rule: field");
		 :}	 |
		 method:m {:
		 	RESULT = new FieldMethodList(mleft, m);
		 	parser.debugs.append("\n" + parser.getLine()+" Reduced rule: method"); 
		 :}	 
  ; 

field ::= type:t idList:idl SEMI 
	{:
	RESULT= new Field(tleft, t, idl);
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'type idList SEMI' ");
	:}
;



idList ::= idList:idl COMMA VAR:v 
	{:
	idl.add(new VarExpr(vleft, v)); RESULT= idl;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'idList'. curr. variable: " + v);
	:} |
	VAR:v
	{:
		
		List l= new ArrayList<VarExpr>();
		l.add (new VarExpr(vleft, v));
		RESULT=l;
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'id': " + v);		
	:}  
;

method ::= STATIC methodDecl:m
{:
	m.isStatic=true; RESULT=m;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'STATIC methodDecl'");
:} 
  	| methodDecl:m  
{:
	m.isStatic=false; RESULT=m;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'methodDecl'");

:}
;

methodDecl ::= formal:f LPAREN formalList:frmls RPAREN LCBR stmt_list:slist RCBR
		{:
			RESULT = new Method (fleft, f, frmls, slist);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule for method decl. method id : " + f.frmName);
		:} 
		| VOID:vo VAR:method_name LPAREN formalList:frmls RPAREN LCBR stmt_list:slist RCBR
		{:
			Formal f=new Formal (method_nameleft, 
				new Type(voleft, "void"), 
				new VarExpr(method_nameleft, method_name));
			RESULT = new Method (method_nameleft, f, frmls, slist);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule for method decl. VOID. method id: " + method_name);
		:} 
;


//formal (type and id )
//example : int x
formal ::= type:t VAR:v
	{: 
		RESULT=new Formal (tleft, t, new VarExpr(parser.getLine(), v));
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formal'. "
		+ "type: " + t + ", id: " + v ); 
	:}
;

formalList ::=
		//empty formals list
		{:
			RESULT = new FormalsList(parser.getLine());
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals list' no formals ");
		:}  
		
		//single formal
		| formal:frm 
		{:
			RESULT = new FormalsList(frmleft, frm);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals list' single formal ");
		:}
		
		//list of formals, add new member.
		|   formalList:fList COMMA formal:frm 
		{:
			fList.addFrml(frm); 
			RESULT = fList; 
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals COMMA type VAR' ");
	 	:}
;


type ::= INT:i
		{:
			RESULT = new Type (ileft, "int");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'int'");
						
		:} | 
		BOOLEAN:b {:
			RESULT = new Type (bleft, "boolean");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'boolean' ");
			
		:} |
		STRING:s
		{:
			RESULT = new Type (sleft, "string");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'string' ");
			
		:} | 
		 CLASS_ID:cl_id {:
			RESULT = new Type (cl_idleft, cl_id);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'class type': " + cl_id);
			
		:} | 
		 type:tp LB RB{:
		 	RESULT = new TypeArray(tpleft, tp);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'type array' of type " + tp);	
		 :}
;

// rule for a list of statements. (0 or more)
stmt_list ::=	
	
	//empty rule.
	{:
		RESULT = new StmtList(parser.getLine()); 
	:}
	
	//list with 1 new statement.
	| stmt_list:sl stmt:s
	{: 
		sl.addStmt(s);
		RESULT = sl;
		parser.debugs.append("\n" + parser.getLine()+" reduced list of statements. new statement: "
		+ s ); 
	:}
	
;

//Statement

stmt ::= 

	//assign statement
	//syntax:    'location = expr;' 
	location:loc ASSIGN expr:value SEMI
	{:
	RESULT = new AssignStmt(locleft, loc, value);
	parser.debugs.append("\n" + parser.getLine()+" Reduced assignment stmt. assign to location: " 
	 + loc + " , assign value: " + value);	
	:}
	
	 | call:c SEMI
	 {:
	 RESULT = new CallStatement(cleft, c);
	 //TODO print details
	 parser.debugs.append("\n" + parser.getLine()+" Reduced call statement for call");
	 :}
	 
	 | RETURN:r SEMI
	 {:
	 RESULT = new ReturnVoidStatement(rleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced return;"); 
	 :}
	 
	 | RETURN:r expr:e SEMI
	 {:
	 RESULT = new ReturnExprStatement(rleft, e);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced return expression for expression: "
	 + e.toString () );
	 :}
	 
	 //statement: simple if.
	 | IF:i LPAREN expr:condition RPAREN stmt:commands
	 {:
	 RESULT = new StmtIf(ileft, condition, commands);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced if statemnt.");	//TODO print details.
	 :}
	 
	 //statement: if with else.
	 | IF:i LPAREN expr:condition RPAREN stmt:commands ELSE stmt:commands_else
	 {:
	 RESULT = new StmtIf(ileft, condition, commands, commands_else);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced if/else statement."); //TODO print details.
	 :} 
	 
	 //statement: while
	 | WHILE:wh LPAREN expr:condition RPAREN stmt:commands
	 {:
	 RESULT = new StmtWhile(whleft, condition, commands);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced while statement.");
	 :}
	 
	 | BREAK:br SEMI
	 {:
	 RESULT = new StmtBreak(brleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced break;");
	 :}
	 
	 | CONTINUE:co SEMI
	 {:
	 RESULT = new StmtContinue(coleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced continue;");
	 :}
	 
	 //Statement: code block (list of statements).
	 //syntax:   { stmt_list }
	 | LCBR stmt_list:sl RCBR
	 {:
	 	RESULT= sl;
		 parser.debugs.append("\n" + parser.getLine()+" Reduced statements block. ");
		 //(the list itself will be printed and returned in inner rule.)
	 :}
	 
	 //variable declaration.
	 | type:tp VAR:id SEMI
	 {:
	 RESULT = new StmtDeclareVar(tpleft, tp, id);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced statement: variable declaration. "
	 + RESULT.toString());
	 :}
	 
	 //variable declaration + initialization
	 | type:tp VAR:id ASSIGN expr:val SEMI
	 {:
	 RESULT = new StmtDeclareVar(tpleft, tp, id, val);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced statement: variable declaration. + init."
	 + RESULT.toString());
	 :}
	
;



//Expression
expr ::= 

		//Expression: "location" rule
		location:loc
		{:
			RESULT = loc;
		:}
		
		//Expression: "call " rule
		| call:c 
		{:
			RESULT = c;
		:}
		
		//Expression: "This" rule
		|	THIS:th
		{: 	RESULT = new LocationId (thleft, "this");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'this' ");
		:}
		
		//Expression: new single instance of object.
		//syntax : new CLASS '(' ')'
		//example : new Student ()
		|	NEW:nw CLASS_ID:cl_id LPAREN:lp RPAREN:rp
		{:
			RESULT = new NewClassInstance(nwleft, cl_id);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'new' for class " + cl_id);
		:}
		
		//Expression: new array instance of object.
		//syntax : new type '[' expr ']'
		//example : new Student [5]
		|	NEW:nw type:tp LB expr:e1 RB
		{:
			RESULT = new NewArray(nwleft, tp, e1);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'new array instance'"
			+ " for type " + tp.toString() + ", " 
			+ "array size expression: " + e1.toString());
		:}
				
		//Expression: length field.
		//expr '.' length
		| expr:e1 DOT:dt LENGTH:ln
		{:
			RESULT = new ExprLength (e1left, e1);
			parser.debugs.append("\n" +"Reduced rule 'length' for expr: " + e1 ) ;
		:}
		
		
		//Expression: binary ops.
		|	expr:e1 binop:op expr:e2
		{: RESULT = new BinaryOpExpr(e1left, e1, e2, op);
		   parser.debugs.append("\n" + parser.getLine()+" Reduced rule e1 "+op+" e2 for e1=" + e1 + " and e2="+e2);
		 :}



		//Expression: Unray operarion
		| MINUS expr:e1
		{: RESULT = new UnaryOpExpr(e1left, e1, Operator.MINUS); :} %prec UMINUS

		| LNEG expr:e1
		{: RESULT = new UnaryOpExpr(e1left, e1, Operator.LNEG); :}


		//Expression: literal
		| literal:lit
		{:
			RESULT = lit;
		:}
		
		//Expression between parens.
		| LPAREN expr:e RPAREN
		{:
			RESULT = e;
		:}

;

//Location. (meaning: some variable instance, variable field,
// member of array)
location ::= 

		//location: ID
		VAR:v
		{: 
			RESULT = new LocationId(vleft, v);
			parser.debugs.append("\n" +"reduced rule- Location ID: " + v) ; 
		:}
		
		//location: member access (the member "id" can be field, method etc.) 
		// syntax: expr '.' ID
		| expr:ex DOT VAR:v
 		{: 
 			RESULT = new LocationExpressionMember(exleft, ex, v);
			parser.debugs.append("\n" +"reduced rule- Location Expr.Member for expression: " 
			+ ex + "and member: " + v) ; 
 		:}
		
		//location: array subscript access
		// syntax: expr '[' expr ']'
		| expr:arr LB expr:subscript RB
		{:
			RESULT = new LocationArrSubscript(arrleft, arr, subscript);
			parser.debugs.append("\n" +"reduced rule- Location Array subscript." 
			+ " Array expression: " +  arr 
			+ ", subscript expression: " + subscript) ; 
		:}
;

 
 
//a rule for function call arguments
args_list ::= 	//empty arguments.
				{: 
					RESULT = new ArrayList <Expr> ();
				:}
				//one argument
				| expr:new_arg
				{: 
					// add the single argument
					List<Expr> list1 = new ArrayList <Expr>();
					list1.add(new_arg);
					RESULT = list1;
					parser.debugs.append("\n" +"Reduced rule: one argument: " + new_arg);
				:}
						
				// a list of arguments.
				// takes a list (maybe empty) adds one argument to it.
				| args_list:list1 COMMA expr:new_arg
				{: 
					// add the n-th argument
					list1.add(new_arg);
					RESULT = list1;
					parser.debugs.append("\n" +"Reduced rule: list of arguments."
					+ "added argument: " + new_arg);
				:}
;

 
//call
call ::= 	
		staticCall:c
		{:
			RESULT = c;
		:}
	
	 	| virtualCall:c
		{:
			RESULT = c;
		:}
;

//virtual call
virtualCall ::=

	//virtual call with object instance.
	//example : moish.getName(arg1)
	expr:e1 DOT VAR:meth_id LPAREN args_list:arguments RPAREN  
	{:
	RESULT = new CallVirtual(e1left, e1, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallVirtual (object instance). call details: " + RESULT.toString());
	:}
	
	//virtual call without object instance.
	//(may be inside a class member function)
	//example : getName(arg1)
	| VAR:meth_id LPAREN args_list:arguments RPAREN  
	{:
	RESULT = new CallVirtual(meth_idleft, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallVirtual (no instance). call details: " + RESULT.toString());
	:}
;

//static call
staticCall ::=
	CLASS_ID:cl_id DOT VAR:meth_id LPAREN args_list:arguments RPAREN
	{:
	RESULT = new CallStatic(cl_idleft, cl_id, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallStatic. call details: " + RESULT.toString());
	:}
;

//binop
binop ::=
PLUS:op
{:
RESULT = Operator.PLUS;
:}
 | MINUS:op
{:
RESULT = Operator.MINUS;
:}
  | MULT:op
{:
RESULT = Operator.MULT;
:}
  | DIV:op
{:
RESULT = Operator.DIV;
:}
  | MOD:op
{:
RESULT = Operator.MOD;
:}
 |  LAND:op
{:
RESULT = Operator.LAND;
:}
  | LOR:op
{:
RESULT = Operator.LOR;
:}
  | GT:op
{:
RESULT = Operator.GT;
:}
  | GE:op
{:
RESULT = Operator.GE;
:}
  | LT:op
{:
RESULT = Operator.LT;
:}
  | LE:op
{:
RESULT = Operator.LE;
:}
  | EQUAL:op
{:
RESULT = Operator.EQUAL;
:}
  | NEQUAL: op
{:
RESULT = Operator.NEQUAL;
:}
;


//literal
//TODO: fix the rest of literals
literal ::=
		
		//number literal
		//example : 5
		NUMBER:n
		{: 
		RESULT = new LiteralNumber(nleft, n);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for num. literal = "+n);
		:}
		
		//string literal.
		//example : "banana"
		| QUOTE:lit
		{:
		RESULT = new LiteralString(litleft, lit);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = "+lit);
		:}
		
		 | TRUE
		 {:
		RESULT = new LiteralBoolean(parser.getLine(), true);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = true ");
		:}
		  | FALSE
		  {:
		RESULT = new LiteralBoolean(parser.getLine(), false);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = false ");
		:}
		   | NULL: lit 
		{:
		RESULT = new LiteralNull(parser.getLine());
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = "+lit);
		:}
		;
