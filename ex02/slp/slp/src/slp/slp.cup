package slp;

import java_cup.runtime.*;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};

terminal READI, PRINT;
terminal Integer NUMBER;
terminal String VAR;
terminal String CLASS_ID;
terminal UMINUS;
terminal PLUS;
terminal MULT;
terminal DIV;
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal COMMA;
terminal CONTINUE;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GE;
terminal IF;
terminal INT;
terminal LAND;
terminal LB;
terminal LPAREN;
terminal LCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LE;
terminal MINUS;
terminal MOD;
terminal NEQUAL;
terminal NULL;
terminal RB;
terminal RCBR;
terminal RETURN;
terminal RPAREN;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal QUOTE;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;


non terminal program;
non terminal classDecl;
non terminal classDeclList;
non terminal field;
non terminal method;
non terminal fieldMethodList;
non terminal idList;
non terminal typeVoid;
non terminal formals;

non terminal Expr expr;
non terminal Stmt stmt;
non terminal StmtList stmt_list;
non terminal Type type;



precedence left LOR;
precedence left LAND;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left UMINUS;
precedence left GT, LT, GE, LE;



start with stmt_list;

program ::= classDeclList | 
;

classDeclList ::= classDeclList classDecl | classDecl 
;

classDecl ::= CLASS CLASS_ID LCBR fieldMethodList RCBR |
			CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR
;
fieldMethodList ::= field fieldMethodList | method fieldMethodList | field | method ; 

field ::= type idList SEMI 
;

idList ::= idList COMMA VAR | VAR 
;

method ::= STATIC typeVoid VAR LPAREN formals RPAREN LCBR stmt_list RCBR |
			typeVoid VAR LPAREN formals RPAREN LCBR RCBR

;

typeVoid ::= type | VOID 
;

formals ::= type VAR |
		 formals COMMA type VAR 
;

type ::= INT:in
		{:
			RESULT = new Type ("int");
		:}	| 
		BOOLEAN |
		 STRING | 
		 CLASS_ID | 
		 type LB RB
;

stmt_list ::= stmt:s
	{: RESULT = new StmtList(s); :}
	| stmt_list:sl stmt:s
	{: sl.addStmt(s); RESULT = sl; :}
	| 
;

stmt ::= VAR:v ASSIGN expr:e SEMI
	{: VarExpr ve = new VarExpr(v); RESULT = new AssignStmt(ve, e); :}
	| PRINT LPAREN expr:e RPAREN SEMI
	{: RESULT = new PrintStmt(e); :}
;

expr ::= 
			THIS:th
		{: 	RESULT = new VarExpr ("this");
			System.out.println("Reduced rule 'this' ");
		:}
		
		//Expression: new single instance of object.
		//syntax : new CLASS '(' ')'
		//example : new Student ()
		|	NEW:nw CLASS_ID:cl_id LPAREN:lp RPAREN:rp
		{:
			RESULT = new NewVarExpr(cl_id);
			System.out.println("Reduced rule 'new' for class " + cl_id);
		:}
		
		//Expression: new array instance of object.
		//syntax : new type '[' expr ']'
		//example : new Student [5]
		|	NEW:nw type:tp LB:lb expr:e1 RB:rb
		{:
			RESULT = new NewVarExpr(tp.toString(), e1);
			System.out.println("Reduced rule 'new array instance'"
			+ " for type " + tp.toString() + ", " 
			+ "array size expression: " + e1.toString());
		:}
				
		//Expression: length field.
		//expr '.' length
		| expr:e1 DOT:dt LENGTH:ln
		{:
			RESULT = new ExprBase ();
			System.out.println ("Reduced rule 'length' for expr: " + e1 ) ;
		:}
		
		|	expr:e1 PLUS:p expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.PLUS);
		   System.out.println("Reduced rule e1 + e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MINUS expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MINUS);
		   System.out.println("Reduced rule e1 - e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MULT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MULT);
		   System.out.println("Reduced rule e1 * e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 DIV expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.DIV);
		   System.out.println("Reduced rule e1 / e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LAND expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LAND);
		   System.out.println("Reduced rule e1 && e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LOR expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LOR);
		   System.out.println("Reduced rule e1 || e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LT);
		   System.out.println("Reduced rule e1 < e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GT);
		   System.out.println("Reduced rule e1 > e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LE);
		   System.out.println("Reduced rule e1 <= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GE);
		   System.out.println("Reduced rule e1 >= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| MINUS expr:e1
		{: RESULT = new UnaryOpExpr(e1, Operator.MINUS); :} %prec UMINUS

		//Expression between parens.
		| LPAREN expr:e RPAREN
		{: RESULT = e; :}
		
		| NUMBER:n
		{: RESULT = new NumberExpr(n.intValue()); :}
		
		| READI LPAREN RPAREN
		{: RESULT = new ReadIExpr(); :}
		| VAR:v
		{: RESULT = new VarExpr(v); :}
;


