
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 06 16:00:45 IST 2016
//----------------------------------------------------

package slp.mcode;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 06 16:00:45 IST 2016
  */
public class McodeCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public McodeCup() {super();}

  /** Constructor which sets the default scanner. */
  public McodeCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public McodeCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\005\007\000\002\005\006\000" +
    "\002\004\003\000\002\004\005\000\002\006\005\000\002" +
    "\010\003\000\002\010\004\000\002\007\006\000\002\007" +
    "\011\000\002\007\011\000\002\007\006\000\002\007\010" +
    "\000\002\007\010\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\013\000\002\007" +
    "\012\000\002\007\011\000\002\007\010\000\002\007\011" +
    "\000\002\007\004\000\002\007\004\000\002\012\002\000" +
    "\002\012\003\000\002\011\003\000\002\011\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\016\003\000\002\014\003\000\002\015\003" +
    "\000\002\020\003\000\002\020\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\076\073\017\074\042\075\035\076\012\077" +
    "\026\100\015\101\024\102\041\103\016\104\040\105\037" +
    "\106\031\107\006\110\011\111\022\113\045\115\043\116" +
    "\025\117\044\120\023\121\020\122\027\123\013\124\014" +
    "\125\010\126\034\130\033\131\005\132\030\133\007\001" +
    "\002\000\004\002\246\001\002\000\012\112\066\113\060" +
    "\114\063\115\065\001\002\000\004\115\221\001\002\000" +
    "\012\112\066\113\060\114\063\115\065\001\002\000\012" +
    "\112\066\113\060\114\063\115\065\001\002\000\004\115" +
    "\172\001\002\000\004\114\063\001\002\000\012\112\066" +
    "\113\060\114\063\115\065\001\002\000\012\112\066\113" +
    "\060\114\063\115\065\001\002\000\004\115\162\001\002" +
    "\000\004\115\161\001\002\000\004\114\063\001\002\000" +
    "\012\112\066\113\060\114\063\115\065\001\002\000\076" +
    "\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101" +
    "\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\111\ufffe\113\ufffe\115\ufffe\116\ufffe\117\ufffe\120" +
    "\ufffe\121\ufffe\122\ufffe\123\ufffe\124\ufffe\125\ufffe\126\ufffe" +
    "\130\ufffe\131\ufffe\132\ufffe\133\ufffe\001\002\000\012\112" +
    "\066\113\060\114\063\115\065\001\002\000\012\112\066" +
    "\113\060\114\063\115\065\001\002\000\004\115\150\001" +
    "\002\000\012\112\066\113\060\114\063\115\065\001\002" +
    "\000\004\115\144\001\002\000\012\112\066\113\060\114" +
    "\063\115\065\001\002\000\012\112\066\113\060\114\063" +
    "\115\065\001\002\000\004\114\063\001\002\000\076\002" +
    "\uffff\073\017\074\042\075\035\076\012\077\026\100\015" +
    "\101\024\102\041\103\016\104\040\105\037\106\031\107" +
    "\006\110\011\111\022\115\054\116\025\117\044\120\023" +
    "\121\020\122\027\123\013\124\014\125\010\126\034\130" +
    "\033\131\005\132\030\133\007\001\002\000\012\112\066" +
    "\113\060\114\063\115\065\001\002\000\012\112\066\113" +
    "\060\114\063\115\065\001\002\000\004\114\063\001\002" +
    "\000\076\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd" +
    "\107\ufffd\110\ufffd\111\ufffd\113\ufffd\115\ufffd\116\ufffd\117" +
    "\ufffd\120\ufffd\121\ufffd\122\ufffd\123\ufffd\124\ufffd\125\ufffd" +
    "\126\ufffd\130\ufffd\131\ufffd\132\ufffd\133\ufffd\001\002\000" +
    "\004\115\105\001\002\000\004\115\104\001\002\000\004" +
    "\115\103\001\002\000\004\114\063\001\002\000\004\012" +
    "\072\001\002\000\012\112\066\113\060\114\063\115\065" +
    "\001\002\000\004\012\056\001\002\000\076\073\017\074" +
    "\042\075\035\076\012\077\026\100\015\101\024\102\041" +
    "\103\016\104\040\105\037\106\031\107\006\110\011\111" +
    "\022\113\045\115\043\116\025\117\044\120\023\121\020" +
    "\122\027\123\013\124\014\125\010\126\034\130\033\131" +
    "\005\132\030\133\007\001\002\000\076\002\ufff5\073\ufff5" +
    "\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102" +
    "\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5" +
    "\111\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122" +
    "\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5\130\ufff5\131\ufff5" +
    "\132\ufff5\133\ufff5\001\002\000\076\002\001\073\017\074" +
    "\042\075\035\076\012\077\026\100\015\101\024\102\041" +
    "\103\016\104\040\105\037\106\031\107\006\110\011\111" +
    "\022\115\054\116\025\117\044\120\023\121\020\122\027" +
    "\123\013\124\014\125\010\126\034\130\033\131\005\132" +
    "\030\133\007\001\002\000\076\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\113\ufffc" +
    "\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123" +
    "\ufffc\124\ufffc\125\ufffc\126\ufffc\130\ufffc\131\ufffc\132\ufffc" +
    "\133\ufffc\001\002\000\076\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\113\ufffb\115" +
    "\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123\ufffb" +
    "\124\ufffb\125\ufffb\126\ufffb\130\ufffb\131\ufffb\132\ufffb\133" +
    "\ufffb\001\002\000\076\002\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\115\ufff4" +
    "\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\124" +
    "\ufff4\125\ufff4\126\ufff4\130\ufff4\131\ufff4\132\ufff4\133\ufff4" +
    "\001\002\000\004\012\055\001\002\000\076\002\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3" +
    "\122\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\130\uffd3\131" +
    "\uffd3\132\uffd3\133\uffd3\001\002\000\004\127\057\001\002" +
    "\000\076\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\111\ufff6\113\ufff6\115\ufff6\116\ufff6\117" +
    "\ufff6\120\ufff6\121\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6" +
    "\126\ufff6\130\ufff6\131\ufff6\132\ufff6\133\ufff6\001\002\000" +
    "\110\002\uffc8\004\uffc8\005\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8\121" +
    "\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\130\uffc8" +
    "\131\uffc8\132\uffc8\133\uffc8\001\002\000\004\011\070\001" +
    "\002\000\106\002\uffcd\004\uffcd\005\uffcd\007\uffcd\011\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101" +
    "\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd" +
    "\110\uffcd\111\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121" +
    "\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\130\uffcd" +
    "\131\uffcd\132\uffcd\133\uffcd\001\002\000\112\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\073\uffca" +
    "\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca" +
    "\111\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122" +
    "\uffca\123\uffca\124\uffca\125\uffca\126\uffca\130\uffca\131\uffca" +
    "\132\uffca\133\uffca\001\002\000\106\002\uffce\004\uffce\005" +
    "\uffce\007\uffce\011\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105" +
    "\uffce\106\uffce\107\uffce\110\uffce\111\uffce\115\uffce\116\uffce" +
    "\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125" +
    "\uffce\126\uffce\130\uffce\131\uffce\132\uffce\133\uffce\001\002" +
    "\000\106\002\uffcb\004\uffcb\005\uffcb\007\uffcb\011\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb\121\uffcb" +
    "\122\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\130\uffcb\131" +
    "\uffcb\132\uffcb\133\uffcb\001\002\000\106\002\uffc9\004\uffc9" +
    "\005\uffc9\007\uffc9\011\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\115\uffc9\116" +
    "\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9" +
    "\125\uffc9\126\uffc9\130\uffc9\131\uffc9\132\uffc9\133\uffc9\001" +
    "\002\000\106\002\uffcc\004\uffcc\005\uffcc\007\uffcc\011\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc" +
    "\110\uffcc\111\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121" +
    "\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\130\uffcc" +
    "\131\uffcc\132\uffcc\133\uffcc\001\002\000\004\114\063\001" +
    "\002\000\076\002\uffec\073\uffec\074\uffec\075\uffec\076\uffec" +
    "\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105" +
    "\uffec\106\uffec\107\uffec\110\uffec\111\uffec\115\uffec\116\uffec" +
    "\117\uffec\120\uffec\121\uffec\122\uffec\123\uffec\124\uffec\125" +
    "\uffec\126\uffec\130\uffec\131\uffec\132\uffec\133\uffec\001\002" +
    "\000\100\002\uffd3\006\073\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\115\uffd3\116" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\001" +
    "\002\000\006\007\076\115\074\001\002\000\006\007\ufff8" +
    "\011\ufff8\001\002\000\006\007\100\011\077\001\002\000" +
    "\076\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\113\ufff9\115\ufff9\116\ufff9\117\ufff9" +
    "\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124\ufff9\125\ufff9\126" +
    "\ufff9\130\ufff9\131\ufff9\132\ufff9\133\ufff9\001\002\000\004" +
    "\115\101\001\002\000\076\073\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\113\ufffa\115" +
    "\ufffa\116\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa" +
    "\124\ufffa\125\ufffa\126\ufffa\130\ufffa\131\ufffa\132\ufffa\133" +
    "\ufffa\001\002\000\006\007\ufff7\011\ufff7\001\002\000\076" +
    "\002\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7" +
    "\107\uffe7\110\uffe7\111\uffe7\115\uffe7\116\uffe7\117\uffe7\120" +
    "\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7" +
    "\130\uffe7\131\uffe7\132\uffe7\133\uffe7\001\002\000\076\002" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107" +
    "\uffdd\110\uffdd\111\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd" +
    "\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\130" +
    "\uffdd\131\uffdd\132\uffdd\133\uffdd\001\002\000\076\002\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb" +
    "\110\uffdb\111\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121" +
    "\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\130\uffdb" +
    "\131\uffdb\132\uffdb\133\uffdb\001\002\000\076\002\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda" +
    "\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110" +
    "\uffda\111\uffda\115\uffda\116\uffda\117\uffda\120\uffda\121\uffda" +
    "\122\uffda\123\uffda\124\uffda\125\uffda\126\uffda\130\uffda\131" +
    "\uffda\132\uffda\133\uffda\001\002\000\076\002\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102" +
    "\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6" +
    "\111\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122" +
    "\uffe6\123\uffe6\124\uffe6\125\uffe6\126\uffe6\130\uffe6\131\uffe6" +
    "\132\uffe6\133\uffe6\001\002\000\004\011\110\001\002\000" +
    "\004\114\063\001\002\000\076\002\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103" +
    "\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1" +
    "\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123" +
    "\uffe1\124\uffe1\125\uffe1\126\uffe1\130\uffe1\131\uffe1\132\uffe1" +
    "\133\uffe1\001\002\000\004\011\113\001\002\000\012\112" +
    "\066\113\060\114\063\115\065\001\002\000\076\002\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101" +
    "\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3" +
    "\110\ufff3\111\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121" +
    "\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3\130\ufff3" +
    "\131\ufff3\132\ufff3\133\ufff3\001\002\000\004\010\116\001" +
    "\002\000\012\112\066\113\060\114\063\115\065\001\002" +
    "\000\004\004\120\001\002\000\006\005\122\113\060\001" +
    "\002\000\006\005\uffc7\011\uffc7\001\002\000\004\011\134" +
    "\001\002\000\006\005\130\011\127\001\002\000\004\013" +
    "\125\001\002\000\012\112\066\113\060\114\063\115\065" +
    "\001\002\000\006\005\uffc5\011\uffc5\001\002\000\004\113" +
    "\060\001\002\000\004\011\131\001\002\000\004\114\063" +
    "\001\002\000\076\002\uffd9\073\uffd9\074\uffd9\075\uffd9\076" +
    "\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9" +
    "\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\115\uffd9\116" +
    "\uffd9\117\uffd9\120\uffd9\121\uffd9\122\uffd9\123\uffd9\124\uffd9" +
    "\125\uffd9\126\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\001" +
    "\002\000\006\005\uffc6\011\uffc6\001\002\000\004\114\063" +
    "\001\002\000\076\002\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8" +
    "\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\115\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8" +
    "\125\uffd8\126\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\001" +
    "\002\000\004\011\137\001\002\000\004\114\063\001\002" +
    "\000\076\002\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0" +
    "\106\ufff0\107\ufff0\110\ufff0\111\ufff0\115\ufff0\116\ufff0\117" +
    "\ufff0\120\ufff0\121\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0" +
    "\126\ufff0\130\ufff0\131\ufff0\132\ufff0\133\ufff0\001\002\000" +
    "\004\011\142\001\002\000\004\114\063\001\002\000\076" +
    "\002\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\111\uffe9\115\uffe9\116\uffe9\117\uffe9\120" +
    "\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9" +
    "\130\uffe9\131\uffe9\132\uffe9\133\uffe9\001\002\000\076\002" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107" +
    "\uffe0\110\uffe0\111\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0" +
    "\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\130" +
    "\uffe0\131\uffe0\132\uffe0\133\uffe0\001\002\000\004\011\146" +
    "\001\002\000\004\114\063\001\002\000\076\002\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110" +
    "\uffed\111\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121\uffed" +
    "\122\uffed\123\uffed\124\uffed\125\uffed\126\uffed\130\uffed\131" +
    "\uffed\132\uffed\133\uffed\001\002\000\076\002\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102" +
    "\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde" +
    "\111\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde\122" +
    "\uffde\123\uffde\124\uffde\125\uffde\126\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\001\002\000\004\011\152\001\002\000" +
    "\004\114\063\001\002\000\076\002\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb" +
    "\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\123" +
    "\uffeb\124\uffeb\125\uffeb\126\uffeb\130\uffeb\131\uffeb\132\uffeb" +
    "\133\uffeb\001\002\000\076\002\uffd4\073\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\115" +
    "\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4\123\uffd4" +
    "\124\uffd4\125\uffd4\126\uffd4\130\uffd4\131\uffd4\132\uffd4\133" +
    "\uffd4\001\002\000\004\011\156\001\002\000\004\114\063" +
    "\001\002\000\076\002\uffea\073\uffea\074\uffea\075\uffea\076" +
    "\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\115\uffea\116" +
    "\uffea\117\uffea\120\uffea\121\uffea\122\uffea\123\uffea\124\uffea" +
    "\125\uffea\126\uffea\130\uffea\131\uffea\132\uffea\133\uffea\001" +
    "\002\000\076\002\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\115\uffe8\116\uffe8" +
    "\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125" +
    "\uffe8\126\uffe8\130\uffe8\131\uffe8\132\uffe8\133\uffe8\001\002" +
    "\000\076\002\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc" +
    "\106\uffdc\107\uffdc\110\uffdc\111\uffdc\115\uffdc\116\uffdc\117" +
    "\uffdc\120\uffdc\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc" +
    "\126\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\001\002\000" +
    "\076\002\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\115\uffdf\116\uffdf\117\uffdf" +
    "\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126" +
    "\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\001\002\000\004" +
    "\011\164\001\002\000\004\114\063\001\002\000\076\002" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107" +
    "\uffe3\110\uffe3\111\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3" +
    "\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\130" +
    "\uffe3\131\uffe3\132\uffe3\133\uffe3\001\002\000\004\011\167" +
    "\001\002\000\004\114\063\001\002\000\076\002\uffe4\073" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4" +
    "\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110" +
    "\uffe4\111\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4" +
    "\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\130\uffe4\131" +
    "\uffe4\132\uffe4\133\uffe4\001\002\000\076\002\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5" +
    "\111\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122" +
    "\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\130\uffe5\131\uffe5" +
    "\132\uffe5\133\uffe5\001\002\000\004\004\173\001\002\000" +
    "\014\005\uffd2\112\066\113\060\114\063\115\065\001\002" +
    "\000\004\005\201\001\002\000\006\005\uffd1\011\177\001" +
    "\002\000\006\005\uffd0\011\uffd0\001\002\000\012\112\066" +
    "\113\060\114\063\115\065\001\002\000\006\005\uffcf\011" +
    "\uffcf\001\002\000\004\011\202\001\002\000\004\114\063" +
    "\001\002\000\076\002\uffd5\073\uffd5\074\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5" +
    "\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\115\uffd5\116" +
    "\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5" +
    "\125\uffd5\126\uffd5\130\uffd5\131\uffd5\132\uffd5\133\uffd5\001" +
    "\002\000\004\011\205\001\002\000\004\114\063\001\002" +
    "\000\076\002\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\115\uffe2\116\uffe2\117" +
    "\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2" +
    "\126\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2\001\002\000" +
    "\006\010\215\011\uffcd\001\002\000\004\011\211\001\002" +
    "\000\004\114\063\001\002\000\004\010\213\001\002\000" +
    "\012\112\066\113\060\114\063\115\065\001\002\000\076" +
    "\002\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\115\uffee\116\uffee\117\uffee\120" +
    "\uffee\121\uffee\122\uffee\123\uffee\124\uffee\125\uffee\126\uffee" +
    "\130\uffee\131\uffee\132\uffee\133\uffee\001\002\000\012\112" +
    "\066\113\060\114\063\115\065\001\002\000\004\011\217" +
    "\001\002\000\004\114\063\001\002\000\076\002\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\111\uffef\115\uffef\116\uffef\117\uffef\120\uffef\121\uffef" +
    "\122\uffef\123\uffef\124\uffef\125\uffef\126\uffef\130\uffef\131" +
    "\uffef\132\uffef\133\uffef\001\002\000\004\004\222\001\002" +
    "\000\006\005\224\113\060\001\002\000\006\005\227\011" +
    "\127\001\002\000\004\011\225\001\002\000\004\114\063" +
    "\001\002\000\076\002\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6" +
    "\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\125\uffd6\126\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\001" +
    "\002\000\004\011\230\001\002\000\004\114\063\001\002" +
    "\000\076\002\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7" +
    "\106\uffd7\107\uffd7\110\uffd7\111\uffd7\115\uffd7\116\uffd7\117" +
    "\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7\125\uffd7" +
    "\126\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7\001\002\000" +
    "\006\006\241\011\uffcd\001\002\000\004\011\234\001\002" +
    "\000\004\114\063\001\002\000\004\006\236\001\002\000" +
    "\012\112\066\113\060\114\063\115\065\001\002\000\004" +
    "\007\240\001\002\000\076\002\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\115" +
    "\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\122\ufff1\123\ufff1" +
    "\124\ufff1\125\ufff1\126\ufff1\130\ufff1\131\ufff1\132\ufff1\133" +
    "\ufff1\001\002\000\012\112\066\113\060\114\063\115\065" +
    "\001\002\000\004\007\243\001\002\000\004\011\244\001" +
    "\002\000\004\114\063\001\002\000\076\002\ufff2\073\ufff2" +
    "\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\111\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122" +
    "\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2\130\ufff2\131\ufff2" +
    "\132\ufff2\133\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\016\002\003\003\045\005\035\006\020\007" +
    "\046\010\031\001\001\000\002\001\001\000\012\013\232" +
    "\014\063\015\066\016\231\001\001\000\002\001\001\000" +
    "\012\013\207\014\063\015\066\016\206\001\001\000\012" +
    "\013\203\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\004\016\170\001\001\000\012\013\165\014\063" +
    "\015\066\016\061\001\001\000\012\013\162\014\063\015" +
    "\066\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\157\001\001\000\012\013\154\014\063\015" +
    "\066\016\061\001\001\000\002\001\001\000\012\013\153" +
    "\014\063\015\066\016\061\001\001\000\012\013\150\014" +
    "\063\015\066\016\061\001\001\000\002\001\001\000\012" +
    "\013\144\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\012\013\140\014\063\015\066\016\061\001\001" +
    "\000\012\013\135\014\063\015\066\016\061\001\001\000" +
    "\004\016\114\001\001\000\004\007\052\001\001\000\012" +
    "\013\111\014\063\015\066\016\061\001\001\000\012\013" +
    "\106\014\063\015\066\016\061\001\001\000\004\016\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\101\001\001\000\002" +
    "\001\001\000\012\013\060\014\063\015\066\016\061\001" +
    "\001\000\002\001\001\000\012\005\051\006\050\007\046" +
    "\010\047\001\001\000\002\001\001\000\004\007\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\113\014\063\015\066\016\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\116\014\063" +
    "\015\066\016\061\001\001\000\002\001\001\000\010\015" +
    "\123\017\120\020\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\125\014\063\015\066\016\061\001\001\000\002\001\001" +
    "\000\006\015\123\017\132\001\001\000\002\001\001\000" +
    "\004\016\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\174\012\173\013\175\014\063\015\066\016\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\177\014\063\015\066\016\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\211\001\001\000\002\001\001\000\012\013\213" +
    "\014\063\015\066\016\061\001\001\000\002\001\001\000" +
    "\012\013\215\014\063\015\066\016\061\001\001\000\002" +
    "\001\001\000\004\016\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\123\017\120\020\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\234\001\001\000\002\001\001\000\012" +
    "\013\236\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\241\014\063\015\066" +
    "\016\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\244\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$McodeCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$McodeCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$McodeCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private IRLexer lexer;

	public IRParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$McodeCup$actions {
  private final McodeCup parser;

  /** Constructor */
  CUP$McodeCup$actions(McodeCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$McodeCup$do_action(
    int                        CUP$McodeCup$act_num,
    java_cup.runtime.lr_parser CUP$McodeCup$parser,
    java.util.Stack            CUP$McodeCup$stack,
    int                        CUP$McodeCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$McodeCup$result;

      /* select the action based on the action number */
      switch (CUP$McodeCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_op ::= Memory ASSIGN Op 
            {
              ParamOpPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Memory var = (Memory)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand op = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ParamOpPair(var, op);  
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op",13, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_op_list ::= param_op_list COMMA param_op 
            {
              List<ParamOpPair> RESULT =null;
		int polleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int polright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<ParamOpPair> pol = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		ParamOpPair po = (ParamOpPair)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 pol.add(po); RESULT = pol; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op_list",14, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param_op_list ::= param_op 
            {
              List<ParamOpPair> RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		ParamOpPair po = (ParamOpPair)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<ParamOpPair>(); RESULT.add(po);  
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op_list",14, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Memory ::= VAR 
            {
              Memory RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Memory(name); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Memory",11, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Immediate ::= NUMBER 
            {
              Immediate RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Immediate(val); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Immediate",10, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Reg ::= REG 
            {
              Reg RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Reg(name); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Reg",12, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Op ::= LABEL 
            {
              Operand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Label(l); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Op ::= Memory 
            {
              Operand RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Memory m = (Memory)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = m; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Op ::= Reg 
            {
              Operand RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg r = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = r; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Op ::= Immediate 
            {
              Operand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Immediate i = (Immediate)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = i; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Params ::= Params COMMA Op 
            {
              List<Operand> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<Operand> params = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand param = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 params.add(param);
	   RESULT = params;
	
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Params ::= Op 
            {
              List<Operand> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand param = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Operand>(); RESULT.add(param); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptParams ::= Params 
            {
              List<Operand> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Operand> params = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = params; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("OptParams",8, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptParams ::= 
            {
              List<Operand> RESULT =null;
		 RESULT = new ArrayList<Operand>(); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("OptParams",8, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= LABEL COLON 
            {
              Instruction RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new LabelInstr(new Label(name)); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= RETURN Op 
            {
              Instruction RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand ret = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ReturnInstr(ret); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= LIBRARY LABEL LP OptParams RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<Operand> args = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new LibraryCall(new Label(func), args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= STATICCALL LABEL LP RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StaticCall(new Label(func), new ArrayList<ParamOpPair>(), dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= STATICCALL LABEL LP param_op_list RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<ParamOpPair> args = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StaticCall(new Label(func), args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= VIRTUALLCALL Reg DOT Op LP RP COMMA Reg 
            {
              Instruction RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).right;
		Reg obj = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Operand func = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new VirtualCall(obj, func, new ArrayList<ParamOpPair>(), dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= VIRTUALLCALL Reg DOT Op LP param_op_list RP COMMA Reg 
            {
              Instruction RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).right;
		Reg obj = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Operand func = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<ParamOpPair> args = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new VirtualCall(obj, func, args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-8)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= JUMPLE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.LE); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= JUMPL LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.L); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= JUMPGE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.GE); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= JUMPG LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.G); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= JUMPFALSE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.False); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= JUMPTRUE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.True); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= JUMP LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new JumpInstr(new Label(label)); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= COMPARE Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CompareInstr(src, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= XOR Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.XOR); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= OR Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.OR); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= AND Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.AND); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= NOT Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.NOT); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= NEG Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.NEG); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= DEC Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.DEC); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= INC Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.INC); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= MOD Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.MOD); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= DIV Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.DIV); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= MUL Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.MUL); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= SUB Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.SUB); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= ADD Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.ADD); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= MOVEFIELD Op COMMA Reg DOT Op 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Operand dst = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveFieldInstr(base, offset, dst, false); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= MOVEFIELD Reg DOT Op COMMA Reg 
            {
              Instruction RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveFieldInstr(base, offset, dst, true); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= ARRAYLENGTH Op COMMA Reg 
            {
              Instruction RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand arr = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayLengthInstr(arr, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= MOVEARRAY Op COMMA Reg LB Op RB 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Operand dst = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new MoveArrayInstr(base, offset, dst, false); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= MOVEARRAY Reg LB Op RB COMMA Reg 
            {
              Instruction RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveArrayInstr(base, offset, dst, true); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= MOVE Op COMMA Op 
            {
              Instruction RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand op1 = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand op2 = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveInstr(op1, op2); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt_list stmt 
            {
              List<Instruction> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Instruction> sl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 sl.add(s);
	   RESULT = sl;
	
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_list ::= stmt 
            {
              List<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Instruction>(); RESULT.add(s); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // string_data ::= VAR COLON STRING 
            {
              StringLiteral RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int literalleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String literal = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StringLiteral(var, literal); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("string_data",4, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_list ::= label_list COMMA LABEL 
            {
              List<String> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<String> ll = (List<String>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 ll.add(l); RESULT = ll; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("label_list",2, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_list ::= LABEL 
            {
              List<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(l); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("label_list",2, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dispatch_vector ::= LABEL COLON LB RB 
            {
              DispatchVector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		 RESULT = new DispatchVector(new Label(name), new ArrayList()); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("dispatch_vector",3, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dispatch_vector ::= LABEL COLON LB label_list RB 
            {
              DispatchVector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<String> ll = (List<String>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new DispatchVector(new Label(name), ll); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("dispatch_vector",3, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data_list ::= data_list dispatch_vector 
            {
              List<Object> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> dl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		DispatchVector dv = (DispatchVector)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 dl.add(dv); RESULT = dl; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // data_list ::= data_list string_data 
            {
              List<Object> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> dl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		StringLiteral sd = (StringLiteral)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 dl.add(sd); RESULT = dl; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data_list ::= dispatch_vector 
            {
              List<Object> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		DispatchVector dv = (DispatchVector)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Object>(); RESULT.add(dv); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // data_list ::= string_data 
            {
              List<Object> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		StringLiteral sd = (StringLiteral)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Object>(); RESULT.add(sd); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= stmt_list 
            {
              Program RESULT =null;
		int stmtlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int stmtlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Instruction> stmtl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Program(new ArrayList<Object>(), stmtl); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		RESULT = start_val;
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$McodeCup$parser.done_parsing();
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= data_list stmt_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> sl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int stmtlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int stmtlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Instruction> stmtl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Program(sl, stmtl); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

