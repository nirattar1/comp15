
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 03 21:22:13 IST 2016
//----------------------------------------------------

package slp.mcode;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 03 21:22:13 IST 2016
  */
public class McodeCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public McodeCup() {super();}

  /** Constructor which sets the default scanner. */
  public McodeCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public McodeCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\005\007\000\002\005\006\000" +
    "\002\004\003\000\002\004\005\000\002\006\005\000\002" +
    "\010\003\000\002\010\004\000\002\007\006\000\002\007" +
    "\011\000\002\007\011\000\002\007\006\000\002\007\010" +
    "\000\002\007\010\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\013\000\002\007" +
    "\012\000\002\007\011\000\002\007\010\000\002\007\011" +
    "\000\002\007\004\000\002\007\004\000\002\012\002\000" +
    "\002\012\003\000\002\011\003\000\002\011\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\016\003\000\002\014\003\000\002\015\003" +
    "\000\002\020\003\000\002\020\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\076\014\033\015\005\016\030\017\007\020" +
    "\025\021\044\022\023\023\020\024\027\025\017\026\042" +
    "\027\035\030\012\031\013\032\014\033\010\034\034\035" +
    "\026\036\015\037\024\040\041\041\016\042\040\043\037" +
    "\044\031\045\006\046\011\047\022\051\045\053\043\001" +
    "\002\000\004\002\246\001\002\000\012\050\066\051\060" +
    "\052\063\053\065\001\002\000\004\053\221\001\002\000" +
    "\012\050\066\051\060\052\063\053\065\001\002\000\012" +
    "\050\066\051\060\052\063\053\065\001\002\000\004\053" +
    "\172\001\002\000\004\052\063\001\002\000\012\050\066" +
    "\051\060\052\063\053\065\001\002\000\012\050\066\051" +
    "\060\052\063\053\065\001\002\000\004\053\162\001\002" +
    "\000\004\053\161\001\002\000\004\052\063\001\002\000" +
    "\012\050\066\051\060\052\063\053\065\001\002\000\076" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\051\ufffe\053\ufffe\001\002\000\012\050" +
    "\066\051\060\052\063\053\065\001\002\000\012\050\066" +
    "\051\060\052\063\053\065\001\002\000\004\053\150\001" +
    "\002\000\012\050\066\051\060\052\063\053\065\001\002" +
    "\000\004\053\144\001\002\000\012\050\066\051\060\052" +
    "\063\053\065\001\002\000\012\050\066\051\060\052\063" +
    "\053\065\001\002\000\004\052\063\001\002\000\076\002" +
    "\uffff\014\033\015\005\016\030\017\007\020\025\021\044" +
    "\022\023\023\020\024\027\025\017\026\042\027\035\030" +
    "\012\031\013\032\014\033\010\034\034\035\026\036\015" +
    "\037\024\040\041\041\016\042\040\043\037\044\031\045" +
    "\006\046\011\047\022\053\054\001\002\000\012\050\066" +
    "\051\060\052\063\053\065\001\002\000\012\050\066\051" +
    "\060\052\063\053\065\001\002\000\004\052\063\001\002" +
    "\000\076\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\051\ufffd\053\ufffd\001\002\000" +
    "\004\053\105\001\002\000\004\053\104\001\002\000\004" +
    "\053\103\001\002\000\004\052\063\001\002\000\004\012" +
    "\072\001\002\000\012\050\066\051\060\052\063\053\065" +
    "\001\002\000\004\012\056\001\002\000\076\014\033\015" +
    "\005\016\030\017\007\020\025\021\044\022\023\023\020" +
    "\024\027\025\017\026\042\027\035\030\012\031\013\032" +
    "\014\033\010\034\034\035\026\036\015\037\024\040\041" +
    "\041\016\042\040\043\037\044\031\045\006\046\011\047" +
    "\022\051\045\053\043\001\002\000\076\002\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\053\ufff5\001\002\000\076\002\001\014\033\015" +
    "\005\016\030\017\007\020\025\021\044\022\023\023\020" +
    "\024\027\025\017\026\042\027\035\030\012\031\013\032" +
    "\014\033\010\034\034\035\026\036\015\037\024\040\041" +
    "\041\016\042\040\043\037\044\031\045\006\046\011\047" +
    "\022\053\054\001\002\000\076\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc" +
    "\053\ufffc\001\002\000\076\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb\053" +
    "\ufffb\001\002\000\076\002\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\053\ufff4" +
    "\001\002\000\004\012\055\001\002\000\076\002\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\053\uffd3\001\002\000\004\054\057\001\002" +
    "\000\076\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\051\ufff6\053\ufff6\001\002\000" +
    "\110\002\uffc8\004\uffc8\005\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\053\uffc8\001\002\000\004\011\070\001" +
    "\002\000\106\002\uffcd\004\uffcd\005\uffcd\007\uffcd\011\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\053\uffcd\001\002\000\112\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\053\uffca\001\002\000\106\002\uffce\004\uffce\005" +
    "\uffce\007\uffce\011\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\053\uffce\001\002" +
    "\000\106\002\uffcb\004\uffcb\005\uffcb\007\uffcb\011\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\053\uffcb\001\002\000\106\002\uffc9\004\uffc9" +
    "\005\uffc9\007\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\053\uffc9\001" +
    "\002\000\106\002\uffcc\004\uffcc\005\uffcc\007\uffcc\011\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\053\uffcc\001\002\000\004\052\063\001" +
    "\002\000\076\002\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\053\uffec\001\002" +
    "\000\100\002\uffd3\006\073\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\053\uffd3\001" +
    "\002\000\006\007\076\053\074\001\002\000\006\007\ufff8" +
    "\011\ufff8\001\002\000\006\007\100\011\077\001\002\000" +
    "\076\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\001\002\000\004" +
    "\053\101\001\002\000\076\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\053" +
    "\ufffa\001\002\000\006\007\ufff7\011\ufff7\001\002\000\076" +
    "\002\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\053\uffe7\001\002\000\076\002" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\053\uffdd\001\002\000\076\002\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\053\uffdb\001\002\000\076\002\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\053\uffda\001\002\000\076\002\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\053\uffe6\001\002\000\004\011\110\001\002\000" +
    "\004\052\063\001\002\000\076\002\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\053\uffe1\001\002\000\004\011\113\001\002\000\012\050" +
    "\066\051\060\052\063\053\065\001\002\000\076\002\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\053\ufff3\001\002\000\004\010\116\001" +
    "\002\000\012\050\066\051\060\052\063\053\065\001\002" +
    "\000\004\004\120\001\002\000\006\005\122\051\060\001" +
    "\002\000\006\005\uffc7\011\uffc7\001\002\000\004\011\134" +
    "\001\002\000\006\005\130\011\127\001\002\000\004\013" +
    "\125\001\002\000\012\050\066\051\060\052\063\053\065" +
    "\001\002\000\006\005\uffc5\011\uffc5\001\002\000\004\051" +
    "\060\001\002\000\004\011\131\001\002\000\004\052\063" +
    "\001\002\000\076\002\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\053\uffd9\001" +
    "\002\000\006\005\uffc6\011\uffc6\001\002\000\004\052\063" +
    "\001\002\000\076\002\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\053\uffd8\001" +
    "\002\000\004\011\137\001\002\000\004\052\063\001\002" +
    "\000\076\002\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\047\ufff0\053\ufff0\001\002\000" +
    "\004\011\142\001\002\000\004\052\063\001\002\000\076" +
    "\002\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\053\uffe9\001\002\000\076\002" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\053\uffe0\001\002\000\004\011\146" +
    "\001\002\000\004\052\063\001\002\000\076\002\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\047\uffed\053\uffed\001\002\000\076\002\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\053\uffde\001\002\000\004\011\152\001\002\000" +
    "\004\052\063\001\002\000\076\002\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\053\uffeb\001\002\000\076\002\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\053" +
    "\uffd4\001\002\000\004\011\156\001\002\000\004\052\063" +
    "\001\002\000\076\002\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\053\uffea\001" +
    "\002\000\076\002\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\053\uffe8\001\002" +
    "\000\076\002\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\053\uffdc\001\002\000" +
    "\076\002\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\053\uffdf\001\002\000\004" +
    "\011\164\001\002\000\004\052\063\001\002\000\076\002" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\053\uffe3\001\002\000\004\011\167" +
    "\001\002\000\004\052\063\001\002\000\076\002\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\053\uffe4\001\002\000\076\002\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\053\uffe5\001\002\000\004\004\173\001\002\000" +
    "\014\005\uffd2\050\066\051\060\052\063\053\065\001\002" +
    "\000\004\005\201\001\002\000\006\005\uffd1\011\177\001" +
    "\002\000\006\005\uffd0\011\uffd0\001\002\000\012\050\066" +
    "\051\060\052\063\053\065\001\002\000\006\005\uffcf\011" +
    "\uffcf\001\002\000\004\011\202\001\002\000\004\052\063" +
    "\001\002\000\076\002\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\053\uffd5\001" +
    "\002\000\004\011\205\001\002\000\004\052\063\001\002" +
    "\000\076\002\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\053\uffe2\001\002\000" +
    "\006\010\215\011\uffcd\001\002\000\004\011\211\001\002" +
    "\000\004\052\063\001\002\000\004\010\213\001\002\000" +
    "\012\050\066\051\060\052\063\053\065\001\002\000\076" +
    "\002\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\053\uffee\001\002\000\012\050" +
    "\066\051\060\052\063\053\065\001\002\000\004\011\217" +
    "\001\002\000\004\052\063\001\002\000\076\002\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\053\uffef\001\002\000\004\004\222\001\002" +
    "\000\006\005\224\051\060\001\002\000\006\005\227\011" +
    "\127\001\002\000\004\011\225\001\002\000\004\052\063" +
    "\001\002\000\076\002\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\053\uffd6\001" +
    "\002\000\004\011\230\001\002\000\004\052\063\001\002" +
    "\000\076\002\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\053\uffd7\001\002\000" +
    "\006\006\241\011\uffcd\001\002\000\004\011\234\001\002" +
    "\000\004\052\063\001\002\000\004\006\236\001\002\000" +
    "\012\050\066\051\060\052\063\053\065\001\002\000\004" +
    "\007\240\001\002\000\076\002\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\053" +
    "\ufff1\001\002\000\012\050\066\051\060\052\063\053\065" +
    "\001\002\000\004\007\243\001\002\000\004\011\244\001" +
    "\002\000\004\052\063\001\002\000\076\002\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\053\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\016\002\003\003\045\005\035\006\020\007" +
    "\046\010\031\001\001\000\002\001\001\000\012\013\232" +
    "\014\063\015\066\016\231\001\001\000\002\001\001\000" +
    "\012\013\207\014\063\015\066\016\206\001\001\000\012" +
    "\013\203\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\004\016\170\001\001\000\012\013\165\014\063" +
    "\015\066\016\061\001\001\000\012\013\162\014\063\015" +
    "\066\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\157\001\001\000\012\013\154\014\063\015" +
    "\066\016\061\001\001\000\002\001\001\000\012\013\153" +
    "\014\063\015\066\016\061\001\001\000\012\013\150\014" +
    "\063\015\066\016\061\001\001\000\002\001\001\000\012" +
    "\013\144\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\012\013\140\014\063\015\066\016\061\001\001" +
    "\000\012\013\135\014\063\015\066\016\061\001\001\000" +
    "\004\016\114\001\001\000\004\007\052\001\001\000\012" +
    "\013\111\014\063\015\066\016\061\001\001\000\012\013" +
    "\106\014\063\015\066\016\061\001\001\000\004\016\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\101\001\001\000\002" +
    "\001\001\000\012\013\060\014\063\015\066\016\061\001" +
    "\001\000\002\001\001\000\012\005\051\006\050\007\046" +
    "\010\047\001\001\000\002\001\001\000\004\007\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\113\014\063\015\066\016\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\116\014\063" +
    "\015\066\016\061\001\001\000\002\001\001\000\010\015" +
    "\123\017\120\020\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\125\014\063\015\066\016\061\001\001\000\002\001\001" +
    "\000\006\015\123\017\132\001\001\000\002\001\001\000" +
    "\004\016\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\174\012\173\013\175\014\063\015\066\016\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\177\014\063\015\066\016\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\211\001\001\000\002\001\001\000\012\013\213" +
    "\014\063\015\066\016\061\001\001\000\002\001\001\000" +
    "\012\013\215\014\063\015\066\016\061\001\001\000\002" +
    "\001\001\000\004\016\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\123\017\120\020\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\234\001\001\000\002\001\001\000\012" +
    "\013\236\014\063\015\066\016\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\241\014\063\015\066" +
    "\016\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\244\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$McodeCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$McodeCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$McodeCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private IRLexer lexer;

	public IRParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$McodeCup$actions {
  private final McodeCup parser;

  /** Constructor */
  CUP$McodeCup$actions(McodeCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$McodeCup$do_action(
    int                        CUP$McodeCup$act_num,
    java_cup.runtime.lr_parser CUP$McodeCup$parser,
    java.util.Stack            CUP$McodeCup$stack,
    int                        CUP$McodeCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$McodeCup$result;

      /* select the action based on the action number */
      switch (CUP$McodeCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_op ::= Memory ASSIGN Op 
            {
              ParamOpPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Memory var = (Memory)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand op = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ParamOpPair(var, op);  
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op",13, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_op_list ::= param_op_list COMMA param_op 
            {
              List<ParamOpPair> RESULT =null;
		int polleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int polright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<ParamOpPair> pol = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		ParamOpPair po = (ParamOpPair)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 pol.add(po); RESULT = pol; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op_list",14, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param_op_list ::= param_op 
            {
              List<ParamOpPair> RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		ParamOpPair po = (ParamOpPair)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<ParamOpPair>(); RESULT.add(po);  
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("param_op_list",14, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Memory ::= VAR 
            {
              Memory RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Memory(name); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Memory",11, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Immediate ::= NUMBER 
            {
              Immediate RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Immediate(val); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Immediate",10, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Reg ::= REG 
            {
              Reg RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Reg(name); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Reg",12, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Op ::= LABEL 
            {
              Operand RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Label(l); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Op ::= Memory 
            {
              Operand RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Memory m = (Memory)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = m; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Op ::= Reg 
            {
              Operand RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg r = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = r; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Op ::= Immediate 
            {
              Operand RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Immediate i = (Immediate)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = i; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Op",9, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Params ::= Params COMMA Op 
            {
              List<Operand> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<Operand> params = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand param = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 params.add(param);
	   RESULT = params;
	
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Params ::= Op 
            {
              List<Operand> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand param = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Operand>(); RESULT.add(param); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptParams ::= Params 
            {
              List<Operand> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Operand> params = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = params; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("OptParams",8, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptParams ::= 
            {
              List<Operand> RESULT =null;
		 RESULT = new ArrayList<Operand>(); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("OptParams",8, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= LABEL COLON 
            {
              Instruction RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new LabelInstr(new Label(name)); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= RETURN Op 
            {
              Instruction RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand ret = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ReturnInstr(ret); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= LIBRARY LABEL LP OptParams RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<Operand> args = (List<Operand>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new LibraryCall(new Label(func), args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= STATICCALL LABEL LP RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StaticCall(new Label(func), new ArrayList<ParamOpPair>(), dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= STATICCALL LABEL LP param_op_list RP COMMA Reg 
            {
              Instruction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<ParamOpPair> args = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StaticCall(new Label(func), args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= VIRTUALLCALL Reg DOT Op LP RP COMMA Reg 
            {
              Instruction RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).right;
		Reg obj = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Operand func = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new VirtualCall(obj, func, new ArrayList<ParamOpPair>(), dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= VIRTUALLCALL Reg DOT Op LP param_op_list RP COMMA Reg 
            {
              Instruction RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).right;
		Reg obj = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-7)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Operand func = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		List<ParamOpPair> args = (List<ParamOpPair>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new VirtualCall(obj, func, args, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-8)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= JUMPLE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.LE); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= JUMPL LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.L); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= JUMPGE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.GE); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= JUMPG LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.G); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= JUMPFALSE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.False); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= JUMPTRUE LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CondJumpInstr(new Label(label), Cond.True); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= JUMP LABEL 
            {
              Instruction RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new JumpInstr(new Label(label)); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= COMPARE Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new CompareInstr(src, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= XOR Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.XOR); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= OR Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.OR); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= AND Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.AND); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= NOT Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.NOT); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= NEG Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.NEG); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= DEC Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.DEC); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= INC Reg 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new UnaryOpInstr(dst, Operator.INC); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= MOD Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.MOD); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= DIV Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.DIV); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= MUL Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.MUL); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= SUB Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.SUB); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= ADD Op COMMA Reg 
            {
              Instruction RESULT =null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand src = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new BinOpInstr(src, dst, Operator.ADD); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= MOVEFIELD Op COMMA Reg DOT Op 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Operand dst = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveFieldInstr(base, offset, dst, false); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= MOVEFIELD Reg DOT Op COMMA Reg 
            {
              Instruction RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveFieldInstr(base, offset, dst, true); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= ARRAYLENGTH Op COMMA Reg 
            {
              Instruction RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand arr = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayLengthInstr(arr, dst); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= MOVEARRAY Op COMMA Reg LB Op RB 
            {
              Instruction RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Operand dst = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new MoveArrayInstr(base, offset, dst, false); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= MOVEARRAY Reg LB Op RB COMMA Reg 
            {
              Instruction RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).right;
		Reg base = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-5)).value;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		Operand offset = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Reg dst = (Reg)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveArrayInstr(base, offset, dst, true); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-6)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= MOVE Op COMMA Op 
            {
              Instruction RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		Operand op1 = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Operand op2 = (Operand)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new MoveInstr(op1, op2); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt_list stmt 
            {
              List<Instruction> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Instruction> sl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 sl.add(s);
	   RESULT = sl;
	
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_list ::= stmt 
            {
              List<Instruction> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Instruction>(); RESULT.add(s); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // string_data ::= VAR COLON STRING 
            {
              StringLiteral RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int literalleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String literal = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new StringLiteral(var, literal); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("string_data",4, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_list ::= label_list COMMA LABEL 
            {
              List<String> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).right;
		List<String> ll = (List<String>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 ll.add(l); RESULT = ll; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("label_list",2, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-2)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_list ::= LABEL 
            {
              List<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(l); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("label_list",2, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dispatch_vector ::= LABEL COLON LB RB 
            {
              DispatchVector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)).value;
		 RESULT = new DispatchVector(new Label(name), new ArrayList()); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("dispatch_vector",3, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-3)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dispatch_vector ::= LABEL COLON LB label_list RB 
            {
              DispatchVector RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<String> ll = (List<String>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		 RESULT = new DispatchVector(new Label(name), ll); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("dispatch_vector",3, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-4)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data_list ::= data_list dispatch_vector 
            {
              List<Object> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> dl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		DispatchVector dv = (DispatchVector)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 dl.add(dv); RESULT = dl; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // data_list ::= data_list string_data 
            {
              List<Object> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> dl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		StringLiteral sd = (StringLiteral)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 dl.add(sd); RESULT = dl; 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data_list ::= dispatch_vector 
            {
              List<Object> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		DispatchVector dv = (DispatchVector)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Object>(); RESULT.add(dv); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // data_list ::= string_data 
            {
              List<Object> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		StringLiteral sd = (StringLiteral)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new ArrayList<Object>(); RESULT.add(sd); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("data_list",1, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= stmt_list 
            {
              Program RESULT =null;
		int stmtlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int stmtlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Instruction> stmtl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Program(new ArrayList<Object>(), stmtl); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		RESULT = start_val;
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$McodeCup$parser.done_parsing();
          return CUP$McodeCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= data_list stmt_list 
            {
              Program RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).right;
		List<Object> sl = (List<Object>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)).value;
		int stmtlleft = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).left;
		int stmtlright = ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()).right;
		List<Instruction> stmtl = (List<Instruction>)((java_cup.runtime.Symbol) CUP$McodeCup$stack.peek()).value;
		 RESULT = new Program(sl, stmtl); 
              CUP$McodeCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$McodeCup$stack.elementAt(CUP$McodeCup$top-1)), ((java_cup.runtime.Symbol)CUP$McodeCup$stack.peek()), RESULT);
            }
          return CUP$McodeCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

