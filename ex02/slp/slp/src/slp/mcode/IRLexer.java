/* The following code was generated by JFlex 1.4.3 on 1/6/16 4:54 PM */

package slp.mcode;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/6/16 4:54 PM from the specification file
 * <tt>/home/uriya/git/comp15/ex02/slp/slp/src/slp/mcode/mcode.lex</tt>
 */
public class IRLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\62\1\0\1\12\1\2\22\0\1\10\1\0\1\0"+
    "\1\11\10\0\1\55\1\0\1\60\1\63\1\3\11\3\1\61\6\0"+
    "\1\21\1\4\1\45\1\37\1\54\1\25\1\53\1\4\1\40\1\50"+
    "\1\4\1\31\1\15\1\42\1\43\2\4\1\6\1\34\1\51\1\4"+
    "\1\4\1\4\1\44\2\4\1\56\1\0\1\57\1\0\1\7\1\0"+
    "\1\23\1\36\1\41\1\30\1\20\1\5\1\32\1\33\1\26\2\5"+
    "\1\27\1\46\1\14\1\16\1\47\1\5\1\22\1\52\1\13\1\35"+
    "\1\17\2\5\1\24\1\5\4\0\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\13\1\21\0\1\3"+
    "\20\0\2\2\45\0\1\4\3\0\1\5\1\6\1\7"+
    "\44\0\1\10\1\11\1\12\20\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\6\0\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\5\0\1\47\2\0\1\50"+
    "\10\0\1\51\1\0\1\52\15\0\1\53\1\54\1\55"+
    "\1\0\1\56\7\0\1\57\32\0\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\64\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u0680\0\64\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u1ba0\0\u22bc"+
    "\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c"+
    "\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc"+
    "\0\u22f0\0\u2630\0\u2664\0\u238c\0\u2698\0\u26cc\0\u2700\0\u2734"+
    "\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2630\0\u2838\0\u2698\0\u286c"+
    "\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac"+
    "\0\u29d8\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18"+
    "\0\u2bac\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84"+
    "\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024"+
    "\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4"+
    "\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364"+
    "\0\u3398\0\u33cc\0\u3400\0\64\0\64\0\64\0\64\0\u3434"+
    "\0\u3468";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\4\2\1\4\1\3\1\5\1\3\2\2"+
    "\1\6\3\2\1\7\12\2\1\10\2\2\1\11\1\12"+
    "\1\2\1\13\1\14\1\15\1\16\2\2\1\17\11\2"+
    "\1\3\1\20\65\0\2\3\5\0\1\3\1\0\1\3"+
    "\47\0\1\3\4\0\5\21\3\0\42\21\7\0\2\5"+
    "\1\0\7\5\1\0\47\5\1\0\1\5\16\0\1\22"+
    "\16\0\1\23\42\0\1\24\5\0\1\25\5\0\1\26"+
    "\70\0\1\27\46\0\1\30\5\0\1\31\51\0\1\32"+
    "\65\0\1\33\1\0\1\34\65\0\1\35\57\0\1\36"+
    "\63\0\1\37\102\0\1\40\111\0\1\41\3\0\5\21"+
    "\3\0\42\21\4\0\1\42\21\0\1\43\10\0\1\44"+
    "\62\0\1\45\64\0\1\46\55\0\1\47\71\0\1\50"+
    "\71\0\1\51\66\0\1\52\41\0\1\53\105\0\1\54"+
    "\35\0\1\55\102\0\1\56\41\0\1\57\75\0\1\60"+
    "\107\0\1\61\63\0\1\62\15\0\2\41\1\63\57\41"+
    "\1\64\1\41\20\0\1\65\53\0\1\66\63\0\1\67"+
    "\63\0\1\70\76\0\1\71\50\0\1\72\63\0\1\73"+
    "\63\0\1\74\63\0\1\75\63\0\1\76\63\0\1\77"+
    "\63\0\1\100\56\0\1\101\1\0\1\102\1\103\4\0"+
    "\2\102\1\0\3\102\1\0\3\102\1\0\3\102\1\0"+
    "\2\102\1\0\2\102\2\0\1\102\4\0\2\102\2\0"+
    "\1\102\21\0\1\104\122\0\1\105\63\0\1\106\24\0"+
    "\1\107\10\0\1\110\3\0\1\111\41\0\1\112\1\0"+
    "\1\113\1\114\4\0\2\113\1\0\3\113\1\0\3\113"+
    "\1\0\3\113\1\0\2\113\1\0\2\113\2\0\1\113"+
    "\4\0\2\113\2\0\1\113\14\0\1\115\1\0\1\116"+
    "\1\117\4\0\2\116\1\0\3\116\1\0\3\116\1\0"+
    "\3\116\1\0\2\116\1\0\2\116\2\0\1\116\4\0"+
    "\2\116\2\0\1\116\14\0\1\120\1\0\1\121\1\122"+
    "\4\0\2\121\1\0\3\121\1\0\3\121\1\0\3\121"+
    "\1\0\2\121\1\0\2\121\2\0\1\121\4\0\2\121"+
    "\2\0\1\121\35\0\1\123\42\0\1\124\1\0\1\125"+
    "\1\126\4\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\3\125\1\0\2\125\1\0\2\125\2\0\1\125\4\0"+
    "\2\125\2\0\1\125\14\0\1\127\1\0\1\130\1\131"+
    "\4\0\2\130\1\0\3\130\1\0\3\130\1\0\3\130"+
    "\1\0\2\130\1\0\2\130\2\0\1\130\4\0\2\130"+
    "\2\0\1\130\17\0\1\132\60\0\1\133\1\0\1\134"+
    "\1\135\4\0\2\134\1\0\3\134\1\0\3\134\1\0"+
    "\3\134\1\0\2\134\1\0\2\134\2\0\1\134\4\0"+
    "\2\134\2\0\1\134\17\0\1\136\63\0\1\137\63\0"+
    "\1\140\60\0\1\101\51\0\1\141\11\0\5\102\3\0"+
    "\42\102\1\142\11\0\5\103\3\0\42\103\1\143\11\0"+
    "\1\144\1\0\1\145\1\146\4\0\2\145\1\0\3\145"+
    "\1\0\3\145\1\0\3\145\1\0\2\145\1\0\2\145"+
    "\2\0\1\145\4\0\2\145\2\0\1\145\34\0\1\147"+
    "\50\0\1\150\14\0\1\151\3\0\1\152\17\0\1\153"+
    "\1\0\1\154\13\0\1\155\1\0\1\156\1\157\4\0"+
    "\2\156\1\0\3\156\1\0\3\156\1\0\3\156\1\0"+
    "\2\156\1\0\2\156\2\0\1\156\4\0\2\156\2\0"+
    "\1\156\33\0\1\160\67\0\1\161\40\0\1\112\51\0"+
    "\1\162\11\0\5\113\3\0\42\113\1\163\11\0\5\114"+
    "\3\0\42\114\1\164\11\0\1\115\51\0\1\165\11\0"+
    "\5\116\3\0\42\116\1\166\11\0\5\117\3\0\42\117"+
    "\1\167\11\0\1\120\51\0\1\170\11\0\5\121\3\0"+
    "\42\121\1\171\11\0\5\122\3\0\42\122\1\172\37\0"+
    "\1\173\35\0\1\124\51\0\1\174\11\0\5\125\3\0"+
    "\42\125\1\175\11\0\5\126\3\0\42\126\1\176\11\0"+
    "\1\127\51\0\1\177\11\0\5\130\3\0\42\130\1\200"+
    "\11\0\5\131\3\0\42\131\1\201\11\0\5\132\3\0"+
    "\42\132\12\0\1\133\51\0\1\202\11\0\5\134\3\0"+
    "\42\134\1\203\11\0\5\135\3\0\42\135\1\204\11\0"+
    "\5\136\3\0\42\136\12\0\5\137\3\0\42\137\12\0"+
    "\5\140\3\0\42\140\15\0\1\205\63\0\1\206\63\0"+
    "\1\207\60\0\1\144\51\0\1\210\11\0\5\145\3\0"+
    "\42\145\1\211\11\0\5\146\3\0\42\146\1\212\30\0"+
    "\1\213\50\0\1\214\77\0\1\215\50\0\1\216\43\0"+
    "\1\217\31\0\1\220\51\0\1\221\43\0\1\222\12\0"+
    "\1\155\51\0\1\223\11\0\5\156\3\0\42\156\1\224"+
    "\11\0\5\157\3\0\42\157\1\225\30\0\1\226\61\0"+
    "\1\227\51\0\1\230\63\0\1\231\63\0\1\232\63\0"+
    "\1\233\63\0\1\234\63\0\1\235\63\0\1\236\63\0"+
    "\1\237\63\0\1\240\75\0\1\241\51\0\1\242\63\0"+
    "\1\243\63\0\1\244\63\0\1\245\63\0\1\246\63\0"+
    "\1\247\63\0\1\250\63\0\1\251\63\0\1\252\60\0"+
    "\5\205\3\0\42\205\12\0\5\206\3\0\42\206\12\0"+
    "\5\207\3\0\42\207\15\0\1\253\63\0\1\254\63\0"+
    "\1\255\75\0\1\256\46\0\5\257\3\0\42\257\36\0"+
    "\1\260\43\0\1\261\64\0\1\262\110\0\1\263\35\0"+
    "\1\264\64\0\1\265\60\0\1\266\1\267\4\0\2\266"+
    "\1\0\3\266\1\0\3\266\1\0\3\266\1\0\2\266"+
    "\1\0\2\266\2\0\1\266\4\0\2\266\2\0\1\266"+
    "\17\0\1\270\60\0\1\271\1\0\1\272\1\273\4\0"+
    "\2\272\1\0\3\272\1\0\3\272\1\0\3\272\1\0"+
    "\2\272\1\0\2\272\2\0\1\272\4\0\2\272\2\0"+
    "\1\272\34\0\1\274\67\0\1\275\37\0\5\230\3\0"+
    "\42\230\12\0\5\231\3\0\42\231\12\0\5\232\3\0"+
    "\42\232\12\0\5\233\3\0\42\233\12\0\5\234\3\0"+
    "\42\234\12\0\5\235\3\0\42\235\12\0\5\236\3\0"+
    "\42\236\12\0\5\237\3\0\42\237\12\0\5\240\3\0"+
    "\42\240\23\0\1\276\52\0\5\242\3\0\42\242\12\0"+
    "\5\243\3\0\42\243\12\0\5\244\3\0\42\244\12\0"+
    "\5\245\3\0\42\245\12\0\5\246\3\0\42\246\12\0"+
    "\5\247\3\0\42\247\12\0\5\250\3\0\42\250\12\0"+
    "\5\251\3\0\42\251\12\0\5\252\3\0\42\252\12\0"+
    "\5\253\3\0\42\253\12\0\5\254\3\0\42\254\12\0"+
    "\5\255\3\0\42\255\17\0\1\277\125\0\1\300\14\0"+
    "\5\301\3\0\42\301\16\0\1\302\74\0\1\303\46\0"+
    "\5\304\3\0\42\304\16\0\1\305\57\0\5\266\3\0"+
    "\42\266\12\0\5\267\3\0\42\267\12\0\5\270\3\0"+
    "\42\270\12\0\1\271\63\0\5\272\3\0\42\272\12\0"+
    "\5\273\3\0\42\273\33\0\1\306\67\0\1\307\65\0"+
    "\1\310\34\0\1\311\1\0\1\312\1\313\4\0\2\312"+
    "\1\0\3\312\1\0\3\312\1\0\3\312\1\0\2\312"+
    "\1\0\2\312\2\0\1\312\4\0\2\312\2\0\1\312"+
    "\31\0\1\314\46\0\5\315\3\0\42\315\17\0\1\316"+
    "\56\0\5\317\3\0\42\317\17\0\1\320\63\0\1\321"+
    "\66\0\1\322\53\0\1\311\51\0\1\323\11\0\5\312"+
    "\3\0\42\312\1\324\11\0\5\313\3\0\42\313\1\325"+
    "\16\0\1\326\62\0\1\327\57\0\1\330\2\0\1\331"+
    "\60\0\1\332\2\0\1\333\110\0\1\334\36\0\1\335"+
    "\63\0\1\336\63\0\1\337\64\0\1\340\57\0\5\341"+
    "\3\0\42\341\12\0\1\330\51\0\1\342\11\0\5\331"+
    "\3\0\42\331\1\343\1\344\10\0\1\332\51\0\1\345"+
    "\11\0\5\333\3\0\42\333\1\346\2\0\1\347\13\0"+
    "\1\350\56\0\5\335\3\0\42\335\12\0\5\336\3\0"+
    "\42\336\12\0\5\337\3\0\42\337\12\0\5\351\3\0"+
    "\42\351\15\0\1\352\63\0\1\353\60\0\1\354\2\0"+
    "\1\355\63\0\1\356\63\0\1\357\60\0\1\360\2\0"+
    "\1\361\62\0\1\362\1\363\4\0\2\362\1\0\3\362"+
    "\1\0\3\362\1\0\3\362\1\0\2\362\1\0\2\362"+
    "\2\0\1\362\4\0\2\362\2\0\1\362\14\0\5\352"+
    "\3\0\42\352\1\0\1\364\10\0\5\353\3\0\42\353"+
    "\1\0\1\365\10\0\1\354\53\0\1\366\7\0\5\355"+
    "\3\0\42\355\2\0\1\367\7\0\5\356\3\0\42\356"+
    "\3\0\1\370\6\0\5\357\3\0\42\357\3\0\1\371"+
    "\6\0\1\360\51\0\1\372\11\0\5\361\3\0\42\361"+
    "\1\373\11\0\5\362\3\0\42\362\1\374\11\0\5\363"+
    "\3\0\42\363\1\375\11\0\1\376\2\0\1\377\60\0"+
    "\1\u0100\2\0\1\u0101\132\0\1\u0102\63\0\1\u0103\11\0"+
    "\1\u0104\2\0\1\u0105\60\0\1\u0106\2\0\1\u0107\63\0"+
    "\1\u0108\63\0\1\u0109\63\0\1\u010a\63\0\1\u010b\60\0"+
    "\1\376\53\0\1\u010c\7\0\5\377\3\0\42\377\2\0"+
    "\1\u010d\7\0\1\u0100\53\0\1\u010e\7\0\5\u0101\3\0"+
    "\42\u0101\2\0\1\u010f\12\0\1\u0110\63\0\1\u0111\60\0"+
    "\1\u0104\63\0\5\u0105\3\0\42\u0105\12\0\1\u0106\63\0"+
    "\5\u0107\3\0\42\u0107\12\0\5\u0108\3\0\42\u0108\12\0"+
    "\5\u0109\3\0\42\u0109\12\0\5\u010a\3\0\42\u010a\12\0"+
    "\5\u010b\3\0\42\u010b\12\0\5\u0110\3\0\42\u0110\12\0"+
    "\5\u0111\3\0\42\u0111\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\21\0\1\11\20\0\1\1\1\11"+
    "\45\0\1\1\3\0\3\1\44\0\3\1\20\0\11\1"+
    "\1\0\14\1\1\0\1\1\6\0\6\1\5\0\1\1"+
    "\2\0\1\1\10\0\1\1\1\0\1\1\15\0\3\1"+
    "\1\0\1\1\7\0\1\1\32\0\10\1\4\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getLineNumber() { return yyline+1+1; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws RuntimeException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new RuntimeException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws RuntimeException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IRToken next_token() throws java.io.IOException, RuntimeException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { System.out.println("JumpFalse label");
				return new IRToken (McodeSym.JUMPFALSE, yyline+1, yytext().split(" ")[1]);
          }
        case 62: break;
        case 42: 
          { System.out.println("JumpGE label");
				return new IRToken (McodeSym.JUMPGE, yyline+1, yytext().split(" ")[1]);
          }
        case 63: break;
        case 51: 
          { System.out.println("movefield reg,reg.reg");
				return new IRToken (McodeSym.MOVEFIELD_REG_REG___REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[1]);
          }
        case 64: break;
        case 33: 
          { System.out.println("move immediate,reg"); 
				return new IRToken (McodeSym.MOVE_IMM_VAR, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 65: break;
        case 37: 
          { System.out.println("move reg,var");
				return new IRToken (McodeSym.MOVE_REG_VAR, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 66: break;
        case 28: 
          { System.out.println("Div reg,reg"); 
				return new IRToken (McodeSym.DIV_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 67: break;
        case 55: 
          { System.out.println("arraylength reg,reg"); 
				return new IRToken (McodeSym.ARRAYLENGTH_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 68: break;
        case 18: 
          { System.out.println("And var,reg"); 
				return new IRToken (McodeSym.AND_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 69: break;
        case 21: 
          { System.out.println("add var,reg"); 
				return new IRToken (McodeSym.ADD_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 70: break;
        case 6: 
          { System.out.println("Not reg"); 
				return new IRToken (McodeSym.NOT, yyline+1, yytext().split(" ")[1]);
          }
        case 71: break;
        case 41: 
          { System.out.println("JumpLE label");
				return new IRToken (McodeSym.JUMPLE, yyline+1, yytext().split(" ")[1]);
          }
        case 72: break;
        case 56: 
          { System.out.println("movearray immediate, reg[immediate]");
				return new IRToken (McodeSym.MOVEARRAY_IMM_REG__IMM, yyline+1, 
				
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[1].split("\\]")[0]);
          }
        case 73: break;
        case 50: 
          { System.out.println("movefield reg, reg.immediate"); 
				return new IRToken (McodeSym.MOVEFIELD_REG_REG___IMM, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[1]);
          }
        case 74: break;
        case 48: 
          { System.out.println("movefield immediate, reg.immediate"); 
				return new IRToken (McodeSym.MOVEFIELD_IMM_REG___IMM, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[1]);
          }
        case 75: break;
        case 20: 
          { System.out.println("add immediate,reg"); 
				return new IRToken (McodeSym.ADD_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 76: break;
        case 43: 
          { System.out.println("Compare immediate,reg");
				return new IRToken (McodeSym.COMPARE_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 77: break;
        case 30: 
          { System.out.println("Xor var,reg"); 
				return new IRToken (McodeSym.XOR_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 78: break;
        case 12: 
          { System.out.println("Mod var,reg"); 
				return new IRToken (McodeSym.MOD_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 79: break;
        case 45: 
          { System.out.println("Compare reg,reg"); 
				return new IRToken (McodeSym.COMPARE_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 80: break;
        case 61: 
          { System.out.println("movearray reg[reg], reg");
				return new IRToken (McodeSym.MOVEARRAY_REG__REG_REG, yyline+1, 
				
				yytext().split(" ")[1].split(",")[0].split("\\[")[0],
				yytext().split(" ")[1].split(",")[0].split("\\[")[1].split("\\]")[0],
				yytext().split(" ")[1].split(",")[1]);
          }
        case 81: break;
        case 10: 
          { System.out.println("Or reg,reg"); 
				return new IRToken (McodeSym.OR_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 82: break;
        case 11: 
          { System.out.println("Mod immediate,reg");
				return new IRToken (McodeSym.MOD_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 83: break;
        case 4: 
          { System.out.println("Dec reg");
				return new IRToken (McodeSym.DEC, yyline+1, yytext().split(" ")[1]);
          }
        case 84: break;
        case 38: 
          { System.out.println("move reg,reg");
				 return new IRToken (McodeSym.MOVE_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 85: break;
        case 36: 
          { System.out.println("move reg,immediate"); 
				return new IRToken (McodeSym.MOVE_REG_IMM, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 86: break;
        case 24: 
          { System.out.println("Sub var,reg"); 
				return new IRToken (McodeSym.SUB_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 87: break;
        case 23: 
          { System.out.println("Sub immediate,reg");
				return new IRToken (McodeSym.SUB_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 88: break;
        case 40: 
          { System.out.println("JumpG label");
				return new IRToken (McodeSym.JUMPG, yyline+1, yytext().split(" ")[1]);
          }
        case 89: break;
        case 14: 
          { System.out.println("Mul immediate,reg"); 
				return new IRToken (McodeSym.MUL_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 90: break;
        case 27: 
          { System.out.println("Div var,reg"); 
				return new IRToken (McodeSym.DIV_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 91: break;
        case 1: 
          { throw new RuntimeException("Illegal character at line " + (yyline+1+1) + " : '" + yytext() + "'");
          }
        case 92: break;
        case 19: 
          { System.out.println("And reg,reg"); 
				return new IRToken (McodeSym.AND_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 93: break;
        case 53: 
          { System.out.println("movefield reg.reg,reg");
				return new IRToken (McodeSym.MOVEFIELD_REG___REG_REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0].split("\\.")[0],
				yytext().split(" ")[1].split(",")[0].split("\\.")[1],
				yytext().split(" ")[1].split(",")[1]);
          }
        case 94: break;
        case 26: 
          { System.out.println("Div immediate,reg"); 
				return new IRToken (McodeSym.DIV_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 95: break;
        case 9: 
          { System.out.println("Or var,reg");
				return new IRToken (McodeSym.OR_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 96: break;
        case 15: 
          { System.out.println("Mul var,reg");
				return new IRToken (McodeSym.MUL_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 97: break;
        case 52: 
          { System.out.println("movefield reg.immediate, reg"); 
				return new IRToken (McodeSym.MOVEFIELD_REG___IMM_REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0].split("\\.")[0],
				yytext().split(" ")[1].split(",")[0].split("\\.")[1],
				yytext().split(" ")[1].split(",")[1]);
          }
        case 98: break;
        case 31: 
          { System.out.println("Xor reg,reg"); 
				return new IRToken (McodeSym.XOR_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 99: break;
        case 13: 
          { System.out.println("Mod reg,reg"); 
				return new IRToken (McodeSym.MOD_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 100: break;
        case 17: 
          { System.out.println("And immediate,reg");
				return new IRToken (McodeSym.AND_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 101: break;
        case 44: 
          { System.out.println("Compare var,reg");
				return new IRToken (McodeSym.COMPARE_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 102: break;
        case 7: 
          { System.out.println("Neg reg");
				return new IRToken (McodeSym.NEG, yyline+1, yytext().split(" ")[1]);
          }
        case 103: break;
        case 34: 
          { System.out.println("move immediate,var");
				return new IRToken (McodeSym.MOVE_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 104: break;
        case 57: 
          { System.out.println("movearray immediate, reg[reg]"); 
				return new IRToken (McodeSym.MOVEARRAY_IMM_REG__REG, yyline+1,
				
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[1].split("\\]")[0]);
          }
        case 105: break;
        case 54: 
          { System.out.println("arraylength var,reg"); 
				return new IRToken (McodeSym.ARRAYLENGTH_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 106: break;
        case 60: 
          { System.out.println("movearray reg[immediate],reg");
				return new IRToken (McodeSym.MOVEARRAY_REG__IMM_REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0].split("\\[")[0],
				yytext().split(" ")[1].split(",")[0].split("\\[")[1].split("\\]")[0],
				yytext().split(" ")[1].split(",")[1]);
          }
        case 107: break;
        case 46: 
          { System.out.println("JumpTrue label"); 
				return new IRToken (McodeSym.JUMPTRUE, yyline+1, yytext().split(" ")[1]);
          }
        case 108: break;
        case 59: 
          { System.out.println("movearray reg, reg[immediate]"); 
				return new IRToken (McodeSym.MOVEARRAY_REG_REG__REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[1].split("\\]")[0]);
          }
        case 109: break;
        case 49: 
          { System.out.println("movefield immediate,reg.reg"); 
				return new IRToken (McodeSym.MOVEFIELD_IMM_REG___REG, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[0],
				yytext().split(" ")[1].split(",")[1].split("\\.")[1]);
          }
        case 110: break;
        case 35: 
          { System.out.println("move var,reg"); 
				return new IRToken (McodeSym.MOVE_VAR_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 111: break;
        case 58: 
          { System.out.println("movearray reg, reg[immediate]"); 
				return new IRToken (McodeSym.MOVEARRAY_REG_REG__IMM, yyline+1, 
				yytext().split(" ")[1].split(",")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[0],
				yytext().split(" ")[1].split(",")[1].split("\\[")[1].split("\\]")[0]);
          }
        case 112: break;
        case 3: 
          { return new IRToken(McodeSym.LABEL, yyline+1, yytext());
          }
        case 113: break;
        case 39: 
          { System.out.println("JumpL label"); 
				return new IRToken (McodeSym.JUMPL, yyline+1, yytext().split(" ")[1]);
          }
        case 114: break;
        case 16: 
          { System.out.println("Mul reg,reg"); 
				return new IRToken (McodeSym.MUL_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 115: break;
        case 5: 
          { System.out.println("Inc reg");
				return new IRToken (McodeSym.INC, yyline+1, yytext().split(" ")[1]);
          }
        case 116: break;
        case 29: 
          { System.out.println("Xor immediate,reg"); 
				return new IRToken (McodeSym.XOR_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 117: break;
        case 22: 
          { System.out.println("MOD reg,reg"); 
				return new IRToken (McodeSym.ADD_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 118: break;
        case 8: 
          { System.out.println("Or immediate,reg"); 
				return new IRToken (McodeSym.OR_IMM_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 119: break;
        case 25: 
          { System.out.println("Sub reg,reg"); 
				return new IRToken (McodeSym.SUB_REG_REG, yyline+1, yytext().split(" ")[1].split(",")[0], yytext().split(" ")[1].split(",")[1]);
          }
        case 120: break;
        case 2: 
          { 
          }
        case 121: break;
        case 32: 
          { System.out.println("Jump label"); 
				return new IRToken (McodeSym.JUMP, yyline+1, yytext().split(" ")[1]);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new IRToken (McodeSym.EOF, yyline+1, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
