/* The following code was generated by JFlex 1.4.3 on 1/6/16 9:29 AM */

package slp.mcode;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/6/16 9:29 AM from the specification file
 * <tt>/home/uriyabartal/git/comp15/ex02/slp/slp/src/slp/mcode/mcode.lex</tt>
 */
public class IRLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\61\1\0\1\12\1\2\22\0\1\10\1\0\1\0"+
    "\1\11\10\0\1\55\1\0\1\60\1\62\1\3\11\3\7\0\1\21"+
    "\1\4\1\45\1\37\1\54\1\25\1\53\1\4\1\40\1\50\1\4"+
    "\1\31\1\15\1\42\1\43\2\4\1\6\1\34\1\51\1\4\1\4"+
    "\1\4\1\44\2\4\1\56\1\0\1\57\1\0\1\7\1\0\1\23"+
    "\1\36\1\41\1\30\1\20\1\5\1\32\1\33\1\26\2\5\1\27"+
    "\1\46\1\14\1\16\1\47\1\5\1\22\1\52\1\13\1\35\1\17"+
    "\2\5\1\24\1\5\4\0\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\13\1\1\3\42\0"+
    "\2\2\21\0\1\4\3\0\1\5\1\6\1\7\36\0"+
    "\1\10\1\11\1\12\16\0\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\0\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\16\0\1\41\2\0\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\50\7\0"+
    "\1\51\1\0\1\52\13\0\1\53\1\54\1\55\1\0"+
    "\1\56\5\0\1\57\41\0\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\231\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u062d\0\63\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4"+
    "\0\u1c17\0\u1c4a\0\u1c7d\0\u161d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\u1f47\0\u1ce3\0\u1f7a\0\u1fad\0\u1d7c\0\u1fe0\0\u2013"+
    "\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u1f7a\0\u22aa\0\u1fe0\0\u22dd"+
    "\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475"+
    "\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u2442\0\u25da"+
    "\0\u260d\0\u2640\0\u2673\0\u26a6\0\u25a7\0\u26d9\0\u270c\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f"+
    "\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07"+
    "\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\63\0\63"+
    "\0\63\0\u2f04\0\u2f37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\4\2\1\4\1\3\1\5\1\3\2\2"+
    "\1\6\3\2\1\7\12\2\1\10\2\2\1\11\1\12"+
    "\1\2\1\13\1\14\1\15\1\16\2\2\1\17\10\2"+
    "\1\3\1\20\64\0\2\3\5\0\1\3\1\0\1\3"+
    "\46\0\1\3\4\0\5\21\3\0\42\21\6\0\2\5"+
    "\1\0\7\5\1\0\46\5\1\0\1\5\16\0\1\22"+
    "\16\0\1\23\41\0\1\24\5\0\1\25\5\0\1\26"+
    "\67\0\1\27\45\0\1\30\5\0\1\31\50\0\1\32"+
    "\64\0\1\33\1\0\1\34\64\0\1\35\56\0\1\36"+
    "\62\0\1\37\101\0\1\40\107\0\1\41\17\0\1\42"+
    "\10\0\1\43\61\0\1\44\63\0\1\45\54\0\1\46"+
    "\70\0\1\47\70\0\1\50\65\0\1\51\40\0\1\52"+
    "\104\0\1\53\34\0\1\54\101\0\1\55\33\0\1\56"+
    "\1\0\1\57\1\60\4\0\2\57\1\0\3\57\1\0"+
    "\3\57\1\0\3\57\1\0\2\57\1\0\2\57\2\0"+
    "\1\57\4\0\2\57\2\0\1\57\32\0\1\61\106\0"+
    "\1\62\62\0\1\63\14\0\2\41\1\64\56\41\1\65"+
    "\1\41\20\0\1\66\45\0\1\67\1\0\1\70\1\71"+
    "\4\0\2\70\1\0\3\70\1\0\3\70\1\0\3\70"+
    "\1\0\2\70\1\0\2\70\2\0\1\70\4\0\2\70"+
    "\2\0\1\70\13\0\1\72\1\0\1\73\1\74\4\0"+
    "\2\73\1\0\3\73\1\0\3\73\1\0\3\73\1\0"+
    "\2\73\1\0\2\73\2\0\1\73\4\0\2\73\2\0"+
    "\1\73\13\0\1\75\1\0\1\76\1\77\4\0\2\76"+
    "\1\0\3\76\1\0\3\76\1\0\3\76\1\0\2\76"+
    "\1\0\2\76\2\0\1\76\4\0\2\76\2\0\1\76"+
    "\33\0\1\100\42\0\1\101\1\0\1\102\1\103\4\0"+
    "\2\102\1\0\3\102\1\0\3\102\1\0\3\102\1\0"+
    "\2\102\1\0\2\102\2\0\1\102\4\0\2\102\2\0"+
    "\1\102\13\0\1\104\1\0\1\105\1\106\4\0\2\105"+
    "\1\0\3\105\1\0\3\105\1\0\3\105\1\0\2\105"+
    "\1\0\2\105\2\0\1\105\4\0\2\105\2\0\1\105"+
    "\16\0\1\107\57\0\1\110\1\0\1\111\1\112\4\0"+
    "\2\111\1\0\3\111\1\0\3\111\1\0\3\111\1\0"+
    "\2\111\1\0\2\111\2\0\1\111\4\0\2\111\2\0"+
    "\1\111\16\0\1\113\62\0\1\114\62\0\1\115\57\0"+
    "\1\56\51\0\1\116\10\0\5\57\3\0\42\57\1\117"+
    "\10\0\5\60\3\0\42\60\1\120\10\0\1\121\1\0"+
    "\1\122\1\123\4\0\2\122\1\0\3\122\1\0\3\122"+
    "\1\0\3\122\1\0\2\122\1\0\2\122\2\0\1\122"+
    "\4\0\2\122\2\0\1\122\57\0\1\124\62\0\1\125"+
    "\23\0\1\126\10\0\1\127\3\0\1\130\40\0\1\67"+
    "\51\0\1\131\10\0\5\70\3\0\42\70\1\132\10\0"+
    "\5\71\3\0\42\71\1\133\10\0\1\72\51\0\1\134"+
    "\10\0\5\73\3\0\42\73\1\135\10\0\5\74\3\0"+
    "\42\74\1\136\10\0\1\75\51\0\1\137\10\0\5\76"+
    "\3\0\42\76\1\140\10\0\5\77\3\0\42\77\1\141"+
    "\31\0\1\142\41\0\1\101\51\0\1\143\10\0\5\102"+
    "\3\0\42\102\1\144\10\0\5\103\3\0\42\103\1\145"+
    "\10\0\1\104\51\0\1\146\10\0\5\105\3\0\42\105"+
    "\1\147\10\0\5\106\3\0\42\106\1\150\10\0\5\107"+
    "\3\0\42\107\11\0\1\110\51\0\1\151\10\0\5\111"+
    "\3\0\42\111\1\152\10\0\5\112\3\0\42\112\1\153"+
    "\10\0\5\113\3\0\42\113\11\0\5\114\3\0\42\114"+
    "\11\0\5\115\3\0\42\115\14\0\1\154\62\0\1\155"+
    "\62\0\1\156\57\0\1\121\51\0\1\157\10\0\5\122"+
    "\3\0\42\122\1\160\10\0\5\123\3\0\42\123\1\161"+
    "\30\0\1\162\46\0\1\163\15\0\1\164\3\0\1\165"+
    "\17\0\1\166\1\0\1\167\12\0\1\170\1\0\1\171"+
    "\1\172\4\0\2\171\1\0\3\171\1\0\3\171\1\0"+
    "\3\171\1\0\2\171\1\0\2\171\2\0\1\171\4\0"+
    "\2\171\2\0\1\171\32\0\1\173\66\0\1\174\42\0"+
    "\1\175\62\0\1\176\62\0\1\177\62\0\1\200\62\0"+
    "\1\201\62\0\1\202\62\0\1\203\62\0\1\204\62\0"+
    "\1\205\105\0\1\206\37\0\1\207\62\0\1\210\62\0"+
    "\1\211\62\0\1\212\62\0\1\213\62\0\1\214\62\0"+
    "\1\215\62\0\1\216\62\0\1\217\57\0\5\154\3\0"+
    "\42\154\11\0\5\155\3\0\42\155\11\0\5\156\3\0"+
    "\42\156\14\0\1\220\62\0\1\221\62\0\1\222\76\0"+
    "\1\223\43\0\5\224\3\0\42\224\31\0\1\225\46\0"+
    "\1\226\44\0\1\227\30\0\1\230\47\0\1\231\44\0"+
    "\1\232\11\0\1\170\51\0\1\233\10\0\5\171\3\0"+
    "\42\171\1\234\10\0\5\172\3\0\42\172\1\235\27\0"+
    "\1\236\60\0\1\237\45\0\5\175\3\0\42\175\11\0"+
    "\5\176\3\0\42\176\11\0\5\177\3\0\42\177\11\0"+
    "\5\200\3\0\42\200\11\0\5\201\3\0\42\201\11\0"+
    "\5\202\3\0\42\202\11\0\5\203\3\0\42\203\11\0"+
    "\5\204\3\0\42\204\11\0\5\205\3\0\42\205\26\0"+
    "\1\240\45\0\5\207\3\0\42\207\11\0\5\210\3\0"+
    "\42\210\11\0\5\211\3\0\42\211\11\0\5\212\3\0"+
    "\42\212\11\0\5\213\3\0\42\213\11\0\5\214\3\0"+
    "\42\214\11\0\5\215\3\0\42\215\11\0\5\216\3\0"+
    "\42\216\11\0\5\217\3\0\42\217\11\0\5\220\3\0"+
    "\42\220\11\0\5\221\3\0\42\221\11\0\5\222\3\0"+
    "\42\222\26\0\1\241\71\0\1\242\36\0\5\243\3\0"+
    "\42\243\15\0\1\244\110\0\1\245\30\0\5\246\3\0"+
    "\42\246\15\0\1\247\60\0\1\250\1\251\4\0\2\250"+
    "\1\0\3\250\1\0\3\250\1\0\3\250\1\0\2\250"+
    "\1\0\2\250\2\0\1\250\4\0\2\250\2\0\1\250"+
    "\16\0\1\252\57\0\1\253\1\0\1\254\1\255\4\0"+
    "\2\254\1\0\3\254\1\0\3\254\1\0\3\254\1\0"+
    "\2\254\1\0\2\254\2\0\1\254\4\0\2\254\2\0"+
    "\1\254\33\0\1\256\66\0\1\257\47\0\1\260\51\0"+
    "\1\261\1\0\1\262\1\263\4\0\2\262\1\0\3\262"+
    "\1\0\3\262\1\0\3\262\1\0\2\262\1\0\2\262"+
    "\2\0\1\262\4\0\2\262\2\0\1\262\62\0\1\264"+
    "\13\0\5\265\3\0\42\265\26\0\1\266\45\0\5\267"+
    "\3\0\42\267\11\0\5\250\3\0\42\250\11\0\5\251"+
    "\3\0\42\251\11\0\5\252\3\0\42\252\11\0\1\253"+
    "\62\0\5\254\3\0\42\254\11\0\5\255\3\0\42\255"+
    "\32\0\1\270\66\0\1\271\64\0\1\272\33\0\1\261"+
    "\51\0\1\273\10\0\5\262\3\0\42\262\1\274\10\0"+
    "\5\263\3\0\42\263\1\275\25\0\1\276\51\0\1\277"+
    "\63\0\1\300\62\0\1\301\65\0\1\302\55\0\1\303"+
    "\62\0\1\304\62\0\1\305\63\0\1\306\56\0\5\307"+
    "\3\0\42\307\11\0\1\310\2\0\1\311\57\0\1\312"+
    "\2\0\1\313\107\0\1\314\32\0\5\303\3\0\42\303"+
    "\11\0\5\304\3\0\42\304\11\0\5\305\3\0\42\305"+
    "\11\0\5\315\3\0\42\315\11\0\1\310\51\0\1\316"+
    "\10\0\5\311\3\0\42\311\1\317\1\320\7\0\1\312"+
    "\51\0\1\321\10\0\5\313\3\0\42\313\1\322\2\0"+
    "\1\323\12\0\1\324\60\0\1\325\62\0\1\326\57\0"+
    "\1\327\2\0\1\330\62\0\1\331\62\0\1\332\57\0"+
    "\1\333\2\0\1\334\61\0\1\335\1\336\4\0\2\335"+
    "\1\0\3\335\1\0\3\335\1\0\3\335\1\0\2\335"+
    "\1\0\2\335\2\0\1\335\4\0\2\335\2\0\1\335"+
    "\13\0\5\325\3\0\42\325\1\0\1\337\7\0\5\326"+
    "\3\0\42\326\1\0\1\340\7\0\1\327\53\0\1\341"+
    "\6\0\5\330\3\0\42\330\2\0\1\342\6\0\5\331"+
    "\3\0\42\331\3\0\1\343\5\0\5\332\3\0\42\332"+
    "\3\0\1\344\5\0\1\333\51\0\1\345\10\0\5\334"+
    "\3\0\42\334\1\346\10\0\5\335\3\0\42\335\1\347"+
    "\10\0\5\336\3\0\42\336\1\350\10\0\1\351\2\0"+
    "\1\352\57\0\1\353\2\0\1\354\131\0\1\355\62\0"+
    "\1\356\10\0\1\357\2\0\1\360\57\0\1\361\2\0"+
    "\1\362\62\0\1\363\62\0\1\364\62\0\1\365\62\0"+
    "\1\366\57\0\1\351\53\0\1\367\6\0\5\352\3\0"+
    "\42\352\2\0\1\370\6\0\1\353\53\0\1\371\6\0"+
    "\5\354\3\0\42\354\2\0\1\371\11\0\1\372\62\0"+
    "\1\373\57\0\1\357\62\0\5\360\3\0\42\360\11\0"+
    "\1\361\62\0\5\362\3\0\42\362\11\0\5\363\3\0"+
    "\42\363\11\0\5\364\3\0\42\364\11\0\5\365\3\0"+
    "\42\365\11\0\5\366\3\0\42\366\11\0\5\372\3\0"+
    "\42\372\11\0\5\373\3\0\42\373\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12138];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\42\0\1\1\1\11\21\0\1\1"+
    "\3\0\3\1\36\0\3\1\16\0\11\1\1\0\14\1"+
    "\1\0\1\1\16\0\1\1\2\0\1\1\1\0\6\1"+
    "\7\0\1\1\1\0\1\1\13\0\3\1\1\0\1\1"+
    "\5\0\1\1\41\0\10\1\3\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getLineNumber() { return yyline+1; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws RuntimeException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new RuntimeException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws RuntimeException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IRToken next_token() throws java.io.IOException, RuntimeException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { System.out.println("move reg,var");
          }
        case 61: break;
        case 36: 
          { System.out.println("move immediate,var");
          }
        case 62: break;
        case 32: 
          { System.out.println("Jump label");
          }
        case 63: break;
        case 59: 
          { System.out.println("movearray reg[immediate],reg");
          }
        case 64: break;
        case 46: 
          { System.out.println("JumpTrue label");
          }
        case 65: break;
        case 34: 
          { System.out.println("JumpG label");
          }
        case 66: break;
        case 50: 
          { System.out.println("movefield reg, reg.immediate");
          }
        case 67: break;
        case 33: 
          { System.out.println("JumpL label");
          }
        case 68: break;
        case 21: 
          { System.out.println("add var,reg");
          }
        case 69: break;
        case 47: 
          { System.out.println("JumpFalse label");
          }
        case 70: break;
        case 22: 
          { System.out.println("add reg,reg");
          }
        case 71: break;
        case 4: 
          { System.out.println("Dec var,reg");
          }
        case 72: break;
        case 37: 
          { System.out.println("move var,reg");
          }
        case 73: break;
        case 40: 
          { System.out.println("move reg,reg");
          }
        case 74: break;
        case 27: 
          { System.out.println("Div var,reg");
          }
        case 75: break;
        case 28: 
          { System.out.println("Div reg,reg");
          }
        case 76: break;
        case 1: 
          { throw new RuntimeException("Illegal character at line " + (yyline+1) + " : '" + yytext() + "'");
          }
        case 77: break;
        case 49: 
          { System.out.println("movefield immediate,reg.reg");
          }
        case 78: break;
        case 8: 
          { System.out.println("Or immediate,reg");
          }
        case 79: break;
        case 12: 
          { System.out.println("Mod var,reg");
          }
        case 80: break;
        case 35: 
          { System.out.println("move immediate,reg");
          }
        case 81: break;
        case 13: 
          { System.out.println("Mod reg,reg");
          }
        case 82: break;
        case 26: 
          { System.out.println("Div immediate,reg");
          }
        case 83: break;
        case 20: 
          { System.out.println("add immediate,reg");
          }
        case 84: break;
        case 5: 
          { System.out.println("Inc immediate,reg");
          }
        case 85: break;
        case 48: 
          { System.out.println("movefield immediate, reg.immediate");
          }
        case 86: break;
        case 52: 
          { System.out.println("movefield reg.immediate, reg");
          }
        case 87: break;
        case 42: 
          { System.out.println("JumpGE label");
          }
        case 88: break;
        case 53: 
          { System.out.println("movefield reg.reg,reg");
          }
        case 89: break;
        case 41: 
          { System.out.println("JumpLE label");
          }
        case 90: break;
        case 38: 
          { System.out.println("move reg,immediate");
          }
        case 91: break;
        case 6: 
          { System.out.println("Not var,reg");
          }
        case 92: break;
        case 7: 
          { System.out.println("Neg reg,reg");
          }
        case 93: break;
        case 17: 
          { System.out.println("And immediate,reg");
          }
        case 94: break;
        case 60: 
          { System.out.println("movearray reg[reg], reg");
          }
        case 95: break;
        case 51: 
          { System.out.println("movefield reg,reg.reg");
          }
        case 96: break;
        case 58: 
          { System.out.println("movearray reg, reg[immediate]");
          }
        case 97: break;
        case 57: 
          { System.out.println("movearray immediate, reg[reg]");
          }
        case 98: break;
        case 44: 
          { System.out.println("Compare var,reg");
          }
        case 99: break;
        case 45: 
          { System.out.println("Compare reg,reg");
          }
        case 100: break;
        case 9: 
          { System.out.println("Or var,reg");
          }
        case 101: break;
        case 10: 
          { System.out.println("Or reg,reg");
          }
        case 102: break;
        case 29: 
          { System.out.println("Xor immediate,reg");
          }
        case 103: break;
        case 23: 
          { System.out.println("Sub immediate,reg");
          }
        case 104: break;
        case 24: 
          { System.out.println("Sub var,reg");
          }
        case 105: break;
        case 25: 
          { System.out.println("Sub reg,reg");
          }
        case 106: break;
        case 15: 
          { System.out.println("Mul var,reg");
          }
        case 107: break;
        case 16: 
          { System.out.println("Mul reg,reg");
          }
        case 108: break;
        case 43: 
          { System.out.println("Compare immediate,reg");
          }
        case 109: break;
        case 18: 
          { System.out.println("And var,reg");
          }
        case 110: break;
        case 30: 
          { System.out.println("Xor var,reg");
          }
        case 111: break;
        case 19: 
          { System.out.println("And reg,reg");
          }
        case 112: break;
        case 56: 
          { System.out.println("movearray immediate, reg[immediate]");
          }
        case 113: break;
        case 14: 
          { System.out.println("Mul immediate,reg");
          }
        case 114: break;
        case 3: 
          { return new IRToken(yyline, "Label", McodeSym.LABEL, yytext());
          }
        case 115: break;
        case 54: 
          { System.out.println("arraylength var,reg");
          }
        case 116: break;
        case 55: 
          { System.out.println("arraylength reg,reg");
          }
        case 117: break;
        case 31: 
          { System.out.println("Xor reg,reg");
          }
        case 118: break;
        case 11: 
          { System.out.println("Mod immediate,reg");
          }
        case 119: break;
        case 2: 
          { 
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new IRToken(yyline, "EOF", McodeSym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
