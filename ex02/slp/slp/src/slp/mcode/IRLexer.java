/* The following code was generated by JFlex 1.4.3 on 1/3/16 10:23 PM */

package slp.mcode;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/3/16 10:23 PM from the specification file
 * <tt>/home/uriyabartal/git/comp15/ex02/slp/slp/src/slp/mcode/mcode.lex</tt>
 */
public class IRLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\65\1\0\1\13\1\2\22\0\1\11\1\10\1\14"+
    "\1\12\10\10\1\61\1\10\1\64\1\66\1\3\11\3\7\10\1\24"+
    "\1\4\1\50\1\42\1\57\1\30\1\56\1\4\1\43\1\53\1\4"+
    "\1\34\1\20\1\45\1\46\2\4\1\6\1\37\1\54\1\4\1\60"+
    "\1\4\1\47\2\4\1\62\1\15\1\63\1\10\1\7\1\10\1\26"+
    "\1\41\1\44\1\33\1\23\1\5\1\35\1\36\1\31\2\5\1\32"+
    "\1\51\1\17\1\21\1\52\1\5\1\25\1\55\1\16\1\40\1\22"+
    "\2\5\1\27\1\5\4\10\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\2"+
    "\16\1\2\5\1\6\1\0\1\7\16\0\1\10\5\0"+
    "\1\5\1\0\1\11\1\12\1\13\1\0\1\14\2\0"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\3\0\1\23"+
    "\3\0\2\2\1\5\23\0\1\24\3\0\1\25\1\26"+
    "\1\27\7\0\1\30\1\0\1\5\30\0\1\31\1\32"+
    "\1\33\6\0\1\34\1\0\1\35\1\0\1\36\5\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\0\1\50\1\51\1\52\2\0\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\0"+
    "\1\64\2\0\1\65\2\0\1\66\7\0\1\67\1\0"+
    "\1\70\1\0\1\71\2\0\1\72\2\0\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\10\0\1\101\1\102\1\103"+
    "\1\0\1\104\1\105\5\0\1\106\5\0\1\107\1\110"+
    "\1\111\1\112\1\0\1\113\5\0\1\114\1\115\1\116"+
    "\41\0\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u014a\0\u01b8\0\67\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u093d\0\67\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u04ba\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u1cca\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\67\0\u2751"+
    "\0\u2788\0\u27bf\0\u24bd\0\u27f6\0\u282d\0\u2562\0\u2864\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u27f6\0\u2bd4"+
    "\0\u2864\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\67"+
    "\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2dfa\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u2fb2\0\67\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881"+
    "\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\67\0\67"+
    "\0\67\0\u3a02\0\u3a39";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\2"+
    "\1\3\1\10\1\3\1\11\1\2\2\5\1\12\3\5"+
    "\1\13\3\5\1\2\3\5\1\14\2\5\1\15\2\5"+
    "\1\16\1\17\1\5\1\20\1\21\1\22\1\23\2\5"+
    "\1\24\1\2\1\5\2\2\1\25\4\2\1\3\1\26"+
    "\70\0\2\3\6\0\1\3\1\0\1\3\51\0\1\3"+
    "\4\0\1\4\66\0\5\5\6\0\43\5\11\0\5\27"+
    "\6\0\5\27\1\30\35\27\11\0\5\31\6\0\43\31"+
    "\6\0\2\10\1\0\10\10\1\0\51\10\1\0\1\10"+
    "\3\0\10\32\1\0\1\33\1\34\47\32\1\0\1\32"+
    "\21\0\1\35\16\0\1\36\45\0\1\37\5\0\1\40"+
    "\5\0\1\41\64\0\1\42\53\0\1\43\21\0\1\44"+
    "\51\0\1\45\5\0\1\46\54\0\1\47\70\0\1\50"+
    "\1\0\1\51\70\0\1\52\62\0\1\53\66\0\1\54"+
    "\105\0\1\55\57\0\1\56\123\0\1\57\3\0\5\27"+
    "\6\0\43\27\11\0\5\27\6\0\1\60\42\27\22\0"+
    "\4\32\71\0\1\61\10\0\1\62\65\0\1\63\67\0"+
    "\1\64\60\0\1\65\74\0\1\66\74\0\1\67\53\0"+
    "\1\70\101\0\1\71\71\0\1\72\44\0\1\73\110\0"+
    "\1\74\40\0\1\75\105\0\1\76\34\0\1\77\1\0"+
    "\1\100\1\101\7\0\2\100\1\0\3\100\1\0\3\100"+
    "\1\0\3\100\1\0\2\100\1\0\2\100\2\0\1\100"+
    "\4\0\2\100\2\0\1\100\36\0\1\102\112\0\1\103"+
    "\66\0\1\104\42\0\1\105\41\0\2\57\1\106\62\57"+
    "\1\107\1\57\3\0\5\27\6\0\22\27\1\110\20\27"+
    "\31\0\1\111\46\0\1\112\1\0\1\113\1\114\7\0"+
    "\2\113\1\0\3\113\1\0\3\113\1\0\3\113\1\0"+
    "\2\113\1\0\2\113\2\0\1\113\4\0\2\113\2\0"+
    "\1\113\14\0\1\115\1\0\1\116\1\117\7\0\2\116"+
    "\1\0\3\116\1\0\3\116\1\0\3\116\1\0\2\116"+
    "\1\0\2\116\2\0\1\116\4\0\2\116\2\0\1\116"+
    "\14\0\1\120\1\0\1\121\1\122\7\0\2\121\1\0"+
    "\3\121\1\0\3\121\1\0\3\121\1\0\2\121\1\0"+
    "\2\121\2\0\1\121\4\0\2\121\2\0\1\121\37\0"+
    "\1\123\43\0\1\124\1\0\1\125\1\126\7\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\3\125\1\0\2\125"+
    "\1\0\2\125\2\0\1\125\4\0\2\125\2\0\1\125"+
    "\36\0\1\127\57\0\1\130\53\0\1\131\1\0\1\132"+
    "\1\133\7\0\2\132\1\0\3\132\1\0\3\132\1\0"+
    "\3\132\1\0\2\132\1\0\2\132\2\0\1\132\4\0"+
    "\2\132\2\0\1\132\17\0\1\134\63\0\1\135\1\0"+
    "\1\136\1\137\7\0\2\136\1\0\3\136\1\0\3\136"+
    "\1\0\3\136\1\0\2\136\1\0\2\136\2\0\1\136"+
    "\4\0\2\136\2\0\1\136\17\0\1\140\66\0\1\141"+
    "\66\0\1\142\63\0\1\77\55\0\1\143\10\0\5\100"+
    "\6\0\43\100\1\144\10\0\5\101\6\0\43\101\1\145"+
    "\10\0\1\146\1\0\1\147\1\150\7\0\2\147\1\0"+
    "\3\147\1\0\3\147\1\0\3\147\1\0\2\147\1\0"+
    "\2\147\2\0\1\147\4\0\2\147\2\0\1\147\63\0"+
    "\1\151\66\0\1\152\32\0\1\153\53\0\5\27\6\0"+
    "\7\27\1\154\33\27\17\0\1\155\12\0\1\156\3\0"+
    "\1\157\41\0\1\112\55\0\1\160\10\0\5\113\6\0"+
    "\43\113\1\161\10\0\5\114\6\0\43\114\1\162\10\0"+
    "\1\115\55\0\1\163\10\0\5\116\6\0\43\116\1\164"+
    "\10\0\5\117\6\0\43\117\1\165\10\0\1\120\55\0"+
    "\1\166\10\0\5\121\6\0\43\121\1\167\10\0\5\122"+
    "\6\0\43\122\1\170\34\0\1\171\42\0\1\124\55\0"+
    "\1\172\10\0\5\125\6\0\43\125\1\173\10\0\5\126"+
    "\6\0\43\126\1\174\33\0\1\175\71\0\1\176\40\0"+
    "\1\131\55\0\1\177\10\0\5\132\6\0\43\132\1\200"+
    "\10\0\5\133\6\0\43\133\1\201\10\0\5\134\6\0"+
    "\43\134\11\0\1\135\55\0\1\202\10\0\5\136\6\0"+
    "\43\136\1\203\10\0\5\137\6\0\43\137\1\204\10\0"+
    "\5\140\6\0\43\140\11\0\5\141\6\0\43\141\11\0"+
    "\5\142\6\0\43\142\14\0\1\205\66\0\1\206\66\0"+
    "\1\207\63\0\1\146\55\0\1\210\10\0\5\147\6\0"+
    "\43\147\1\211\10\0\5\150\6\0\43\150\1\212\33\0"+
    "\1\213\47\0\1\214\20\0\1\215\3\0\1\216\17\0"+
    "\1\217\1\0\1\220\50\0\1\221\31\0\5\27\6\0"+
    "\1\27\1\222\41\27\11\0\1\223\1\0\1\224\1\225"+
    "\7\0\2\224\1\0\3\224\1\0\3\224\1\0\3\224"+
    "\1\0\2\224\1\0\2\224\2\0\1\224\4\0\2\224"+
    "\2\0\1\224\36\0\1\226\72\0\1\227\43\0\1\230"+
    "\66\0\1\231\66\0\1\232\66\0\1\233\66\0\1\234"+
    "\66\0\1\235\66\0\1\236\66\0\1\237\66\0\1\240"+
    "\114\0\1\241\40\0\1\242\66\0\1\243\66\0\1\244"+
    "\105\0\1\245\105\0\1\246\30\0\1\247\66\0\1\250"+
    "\66\0\1\251\66\0\1\252\66\0\1\253\66\0\1\254"+
    "\63\0\5\205\6\0\43\205\11\0\5\206\6\0\43\206"+
    "\11\0\5\207\6\0\43\207\14\0\1\255\66\0\1\256"+
    "\66\0\1\257\105\0\1\260\44\0\5\261\6\0\43\261"+
    "\34\0\1\262\47\0\1\263\47\0\1\264\34\0\1\265"+
    "\50\0\1\266\47\0\1\267\35\0\1\270\43\0\1\223"+
    "\55\0\1\271\10\0\5\224\6\0\43\224\1\272\10\0"+
    "\5\225\6\0\43\225\1\273\32\0\1\274\64\0\1\275"+
    "\46\0\5\230\6\0\43\230\11\0\5\231\6\0\43\231"+
    "\11\0\5\232\6\0\43\232\11\0\5\233\6\0\43\233"+
    "\11\0\5\234\6\0\43\234\11\0\5\235\6\0\43\235"+
    "\11\0\5\236\6\0\43\236\11\0\5\237\6\0\43\237"+
    "\11\0\5\240\6\0\43\240\31\0\1\276\46\0\5\242"+
    "\6\0\43\242\11\0\5\243\6\0\43\243\11\0\5\244"+
    "\6\0\43\244\35\0\1\277\107\0\1\300\21\0\5\247"+
    "\6\0\43\247\11\0\5\250\6\0\43\250\11\0\5\251"+
    "\6\0\43\251\11\0\5\252\6\0\43\252\11\0\5\253"+
    "\6\0\43\253\11\0\5\254\6\0\43\254\11\0\5\255"+
    "\6\0\43\255\11\0\5\256\6\0\43\256\11\0\5\257"+
    "\6\0\43\257\31\0\1\301\75\0\1\302\37\0\5\303"+
    "\6\0\43\303\15\0\1\304\117\0\1\305\31\0\5\306"+
    "\6\0\43\306\15\0\1\307\111\0\1\310\41\0\1\311"+
    "\1\312\7\0\2\311\1\0\3\311\1\0\3\311\1\0"+
    "\3\311\1\0\2\311\1\0\2\311\2\0\1\311\4\0"+
    "\2\311\2\0\1\311\17\0\1\313\63\0\1\314\1\0"+
    "\1\315\1\316\7\0\2\315\1\0\3\315\1\0\3\315"+
    "\1\0\3\315\1\0\2\315\1\0\2\315\2\0\1\315"+
    "\4\0\2\315\2\0\1\315\37\0\1\317\72\0\1\320"+
    "\53\0\1\321\75\0\1\322\43\0\1\323\1\0\1\324"+
    "\1\325\7\0\2\324\1\0\3\324\1\0\3\324\1\0"+
    "\3\324\1\0\2\324\1\0\2\324\2\0\1\324\4\0"+
    "\2\324\2\0\1\324\66\0\1\326\14\0\5\327\6\0"+
    "\43\327\31\0\1\330\46\0\5\331\6\0\43\331\56\0"+
    "\1\332\21\0\5\311\6\0\43\311\11\0\5\312\6\0"+
    "\43\312\11\0\5\313\6\0\43\313\11\0\1\314\66\0"+
    "\5\315\6\0\43\315\11\0\5\316\6\0\43\316\35\0"+
    "\1\333\72\0\1\334\70\0\1\335\63\0\1\336\37\0"+
    "\1\323\55\0\1\337\10\0\5\324\6\0\43\324\1\340"+
    "\10\0\5\325\6\0\43\325\1\341\30\0\1\342\52\0"+
    "\1\343\105\0\1\344\51\0\1\345\66\0\1\346\73\0"+
    "\1\347\102\0\1\350\42\0\1\351\66\0\1\352\66\0"+
    "\1\353\67\0\1\354\62\0\5\355\6\0\43\355\40\0"+
    "\1\356\37\0\1\357\2\0\1\360\63\0\1\361\2\0"+
    "\1\362\116\0\1\363\33\0\5\351\6\0\43\351\11\0"+
    "\5\352\6\0\43\352\11\0\5\353\6\0\43\353\11\0"+
    "\5\364\6\0\43\364\40\0\1\365\37\0\1\357\55\0"+
    "\1\366\10\0\5\360\6\0\43\360\1\367\1\370\7\0"+
    "\1\361\55\0\1\371\10\0\5\362\6\0\43\362\1\372"+
    "\2\0\1\373\13\0\1\374\63\0\1\375\66\0\1\376"+
    "\63\0\1\377\2\0\1\u0100\66\0\1\u0101\66\0\1\u0102"+
    "\63\0\1\u0103\2\0\1\u0104\65\0\1\u0105\1\u0106\7\0"+
    "\2\u0105\1\0\3\u0105\1\0\3\u0105\1\0\3\u0105\1\0"+
    "\2\u0105\1\0\2\u0105\2\0\1\u0105\4\0\2\u0105\2\0"+
    "\1\u0105\14\0\5\375\6\0\43\375\1\0\1\u0107\7\0"+
    "\5\376\6\0\43\376\1\0\1\u0108\7\0\1\377\57\0"+
    "\1\u0109\6\0\5\u0100\6\0\43\u0100\2\0\1\u010a\6\0"+
    "\5\u0101\6\0\43\u0101\3\0\1\u010b\5\0\5\u0102\6\0"+
    "\43\u0102\3\0\1\u010c\5\0\1\u0103\55\0\1\u010d\10\0"+
    "\5\u0104\6\0\43\u0104\1\u010e\10\0\5\u0105\6\0\43\u0105"+
    "\1\u010f\10\0\5\u0106\6\0\43\u0106\1\u0110\10\0\1\u0111"+
    "\2\0\1\u0112\63\0\1\u0113\2\0\1\u0114\141\0\1\u0115"+
    "\66\0\1\u0116\10\0\1\u0117\2\0\1\u0118\63\0\1\u0119"+
    "\2\0\1\u011a\66\0\1\u011b\66\0\1\u011c\66\0\1\u011d"+
    "\66\0\1\u011e\63\0\1\u0111\57\0\1\u011f\6\0\5\u0112"+
    "\6\0\43\u0112\2\0\1\u0120\6\0\1\u0113\57\0\1\u0121"+
    "\6\0\5\u0114\6\0\43\u0114\2\0\1\u0121\11\0\1\u0122"+
    "\66\0\1\u0123\63\0\1\u0117\66\0\5\u0118\6\0\43\u0118"+
    "\11\0\1\u0119\66\0\5\u011a\6\0\43\u011a\11\0\5\u011b"+
    "\6\0\43\u011b\11\0\5\u011c\6\0\43\u011c\11\0\5\u011d"+
    "\6\0\43\u011d\11\0\5\u011e\6\0\43\u011e\11\0\5\u0122"+
    "\6\0\43\u0122\11\0\5\u0123\6\0\43\u0123\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\0\1\11\16\0\1\1\5\0"+
    "\1\1\1\0\3\1\1\0\1\1\2\0\6\1\3\0"+
    "\1\1\3\0\1\1\1\11\1\1\23\0\1\1\3\0"+
    "\3\1\7\0\1\1\1\0\1\1\30\0\3\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\5\0\11\1\1\0"+
    "\3\1\2\0\11\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\7\0\1\11\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\6\1\10\0\3\1\1\0\2\1\5\0"+
    "\1\1\5\0\1\11\3\1\1\0\1\1\5\0\2\1"+
    "\1\11\41\0\10\1\3\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getLineNumber() { return yyline+1; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws RuntimeException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new RuntimeException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws RuntimeException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IRToken next_token() throws java.io.IOException, RuntimeException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { System.out.println("Mod reg,reg");
          }
        case 92: break;
        case 18: 
          { return new IRToken(yyline, yytext(), McodeSym.NEG);
          }
        case 93: break;
        case 91: 
          { System.out.println("movearray reg[reg], reg");
          }
        case 94: break;
        case 14: 
          { return new IRToken(yyline, yytext(), McodeSym.DEC);
          }
        case 95: break;
        case 56: 
          { return new IRToken(yyline, yytext(), McodeSym.COMPARE);
          }
        case 96: break;
        case 19: 
          { return new IRToken(yyline, yytext(), McodeSym.XOR);
          }
        case 97: break;
        case 75: 
          { System.out.println("JumpTrue label");
          }
        case 98: break;
        case 61: 
          { System.out.println("move var,reg");
          }
        case 99: break;
        case 71: 
          { return new IRToken(yyline, yytext(), McodeSym.STATICCALL);
          }
        case 100: break;
        case 27: 
          { System.out.println("Or reg,reg");
          }
        case 101: break;
        case 38: 
          { System.out.println("And var,reg");
          }
        case 102: break;
        case 79: 
          { System.out.println("movefield immediate, reg.immediate");
          }
        case 103: break;
        case 89: 
          { System.out.println("movearray reg, reg[immediate]");
          }
        case 104: break;
        case 55: 
          { return new IRToken(yyline, yytext(), McodeSym.LIBRARY);
          }
        case 105: break;
        case 58: 
          { System.out.println("JumpG label");
          }
        case 106: break;
        case 78: 
          { return new IRToken(yyline, yytext(), McodeSym.VIRTUALLCALL);
          }
        case 107: break;
        case 40: 
          { System.out.println("add immediate,reg");
          }
        case 108: break;
        case 34: 
          { System.out.println("Mul immediate,reg");
          }
        case 109: break;
        case 70: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPFALSE);
          }
        case 110: break;
        case 74: 
          { System.out.println("Compare reg,reg");
          }
        case 111: break;
        case 59: 
          { System.out.println("move immediate,reg");
          }
        case 112: break;
        case 1: 
          { throw new RuntimeException("Illegal character at line " + (yyline+1) + " : '" + yytext() + "'");
          }
        case 113: break;
        case 63: 
          { System.out.println("move reg,var");
          }
        case 114: break;
        case 41: 
          { System.out.println("add var,reg");
          }
        case 115: break;
        case 24: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMP);
          }
        case 116: break;
        case 44: 
          { System.out.println("Sub var,reg");
          }
        case 117: break;
        case 65: 
          { System.out.println("JumpLE label");
          }
        case 118: break;
        case 52: 
          { System.out.println("Jump label");
          }
        case 119: break;
        case 16: 
          { return new IRToken(yyline, yytext(), McodeSym.INC);
          }
        case 120: break;
        case 51: 
          { System.out.println("Xor reg,reg");
          }
        case 121: break;
        case 23: 
          { System.out.println("Neg reg,reg");
          }
        case 122: break;
        case 67: 
          { System.out.println("JumpGE label");
          }
        case 123: break;
        case 30: 
          { return new IRToken(yyline, yytext(), McodeSym.RETURN);
          }
        case 124: break;
        case 62: 
          { System.out.println("move reg,immediate");
          }
        case 125: break;
        case 4: 
          { return new IRToken(yyline, "VAR", McodeSym.VAR, yytext());
          }
        case 126: break;
        case 36: 
          { System.out.println("Mul reg,reg");
          }
        case 127: break;
        case 66: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPTRUE);
          }
        case 128: break;
        case 32: 
          { System.out.println("Mod var,reg");
          }
        case 129: break;
        case 28: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPL);
          }
        case 130: break;
        case 83: 
          { System.out.println("movefield reg.immediate, reg");
          }
        case 131: break;
        case 48: 
          { System.out.println("Div reg,reg");
          }
        case 132: break;
        case 76: 
          { return new IRToken(yyline, yytext(), McodeSym.ARRAYLENGTH);
          }
        case 133: break;
        case 26: 
          { System.out.println("Or var,reg");
          }
        case 134: break;
        case 86: 
          { System.out.println("arraylength reg,reg");
          }
        case 135: break;
        case 10: 
          { return new IRToken(yyline, yytext(), McodeSym.MUL);
          }
        case 136: break;
        case 81: 
          { System.out.println("movefield reg, reg.immediate");
          }
        case 137: break;
        case 15: 
          { return new IRToken(yyline, yytext(), McodeSym.DIV);
          }
        case 138: break;
        case 12: 
          { return new IRToken(yyline, yytext(), McodeSym.ADD);
          }
        case 139: break;
        case 20: 
          { System.out.println("Dec var,reg");
          }
        case 140: break;
        case 25: 
          { System.out.println("Or immediate,reg");
          }
        case 141: break;
        case 29: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPG);
          }
        case 142: break;
        case 31: 
          { System.out.println("Mod immediate,reg");
          }
        case 143: break;
        case 9: 
          { return new IRToken(yyline, yytext(), McodeSym.MOD);
          }
        case 144: break;
        case 68: 
          { return new IRToken(yyline, yytext(), McodeSym.MOVEARRAY);
          }
        case 145: break;
        case 73: 
          { System.out.println("Compare var,reg");
          }
        case 146: break;
        case 54: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPGE);
          }
        case 147: break;
        case 49: 
          { System.out.println("Xor immediate,reg");
          }
        case 148: break;
        case 13: 
          { return new IRToken(yyline, yytext(), McodeSym.SUB);
          }
        case 149: break;
        case 21: 
          { System.out.println("Inc immediate,reg");
          }
        case 150: break;
        case 64: 
          { System.out.println("move reg,reg");
          }
        case 151: break;
        case 43: 
          { System.out.println("Sub immediate,reg");
          }
        case 152: break;
        case 69: 
          { return new IRToken(yyline, yytext(), McodeSym.MOVEFIELD);
          }
        case 153: break;
        case 39: 
          { System.out.println("And reg,reg");
          }
        case 154: break;
        case 35: 
          { System.out.println("Mul var,reg");
          }
        case 155: break;
        case 53: 
          { return new IRToken(yyline, yytext(), McodeSym.JUMPLE);
          }
        case 156: break;
        case 87: 
          { System.out.println("movearray immediate, reg[immediate]");
          }
        case 157: break;
        case 3: 
          { return new IRToken(yyline, "NUMBER", McodeSym.NUMBER, new Integer(yytext()));
          }
        case 158: break;
        case 88: 
          { System.out.println("movearray immediate, reg[reg]");
          }
        case 159: break;
        case 11: 
          { return new IRToken(yyline, yytext(), McodeSym.AND);
          }
        case 160: break;
        case 82: 
          { System.out.println("movefield reg,reg.reg");
          }
        case 161: break;
        case 47: 
          { System.out.println("Div var,reg");
          }
        case 162: break;
        case 50: 
          { System.out.println("Xor var,reg");
          }
        case 163: break;
        case 90: 
          { System.out.println("movearray reg[immediate],reg");
          }
        case 164: break;
        case 57: 
          { System.out.println("JumpL label");
          }
        case 165: break;
        case 7: 
          { return new IRToken(yyline, "String", McodeSym.STRING, yytext());
          }
        case 166: break;
        case 85: 
          { System.out.println("arraylength var,reg");
          }
        case 167: break;
        case 17: 
          { return new IRToken(yyline, yytext(), McodeSym.NOT);
          }
        case 168: break;
        case 84: 
          { System.out.println("movefield reg.reg,reg");
          }
        case 169: break;
        case 77: 
          { System.out.println("JumpFalse label");
          }
        case 170: break;
        case 37: 
          { System.out.println("And immediate,reg");
          }
        case 171: break;
        case 5: 
          { return new IRToken(yyline, "REG", McodeSym.REG, yytext());
          }
        case 172: break;
        case 42: 
          { System.out.println("add reg,reg");
          }
        case 173: break;
        case 60: 
          { System.out.println("move immediate,var");
          }
        case 174: break;
        case 80: 
          { System.out.println("movefield immediate,reg.reg");
          }
        case 175: break;
        case 45: 
          { System.out.println("Sub reg,reg");
          }
        case 176: break;
        case 46: 
          { System.out.println("Div immediate,reg");
          }
        case 177: break;
        case 6: 
          { return new IRToken(yyline, "Label", McodeSym.LABEL, yytext());
          }
        case 178: break;
        case 8: 
          { return new IRToken(yyline, yytext(), McodeSym.OR);
          }
        case 179: break;
        case 72: 
          { System.out.println("Compare immediate,reg");
          }
        case 180: break;
        case 2: 
          { 
          }
        case 181: break;
        case 22: 
          { System.out.println("Not var,reg");
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new IRToken(yyline, "EOF", McodeSym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
