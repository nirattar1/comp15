
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 03 21:20:30 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 03 21:20:30 IST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\003\007" +
    "\000\002\003\011\000\002\010\004\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\005\005\000\002" +
    "\011\005\000\002\011\003\000\002\006\004\000\002\006" +
    "\003\000\002\007\011\000\002\007\012\000\002\012\004" +
    "\000\002\013\002\000\002\013\003\000\002\013\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\017\002\000\002\017" +
    "\004\000\002\016\006\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\016\007\000\002\016\011\000" +
    "\002\016\007\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\007\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\006" +
    "\000\002\015\007\000\002\015\005\000\002\015\005\000" +
    "\002\015\004\000\002\015\004\000\002\015\003\000\002" +
    "\015\005\000\002\014\003\000\002\014\005\000\002\014" +
    "\006\000\002\021\002\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\010\000" +
    "\002\023\006\000\002\024\010\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\002\uffff\014\006\001\002\000\004\002" +
    "\236\001\002\000\006\002\ufffd\014\ufffd\001\002\000\004" +
    "\006\011\001\002\000\006\002\000\014\006\001\002\000" +
    "\006\002\ufffe\014\ufffe\001\002\000\006\021\012\032\013" +
    "\001\002\000\004\006\232\001\002\000\016\006\024\012" +
    "\020\026\015\051\017\052\023\056\021\001\002\000\020" +
    "\006\024\012\020\026\015\045\ufff7\051\017\052\023\056" +
    "\021\001\002\000\006\005\uffeb\030\uffeb\001\002\000\004" +
    "\031\223\001\002\000\014\006\024\012\020\026\015\052" +
    "\023\056\021\001\002\000\006\005\uffea\030\uffea\001\002" +
    "\000\004\005\041\001\002\000\020\006\ufff2\012\ufff2\026" +
    "\ufff2\045\ufff2\051\ufff2\052\ufff2\056\ufff2\001\002\000\006" +
    "\005\uffe9\030\uffe9\001\002\000\006\005\uffe8\030\uffe8\001" +
    "\002\000\004\045\040\001\002\000\006\005\031\030\033" +
    "\001\002\000\020\006\024\012\020\026\015\045\ufff8\051" +
    "\017\052\023\056\021\001\002\000\004\045\ufffa\001\002" +
    "\000\010\015\ufff4\031\uffef\050\ufff4\001\002\000\006\015" +
    "\035\050\036\001\002\000\004\044\034\001\002\000\006" +
    "\005\uffe7\030\uffe7\001\002\000\004\005\037\001\002\000" +
    "\020\006\ufff6\012\ufff6\026\ufff6\045\ufff6\051\ufff6\052\ufff6" +
    "\056\ufff6\001\002\000\006\015\ufff5\050\ufff5\001\002\000" +
    "\006\002\ufffc\014\ufffc\001\002\000\004\031\042\001\002" +
    "\000\016\006\024\012\020\015\uffee\026\015\047\uffee\052" +
    "\023\001\002\000\006\005\221\030\033\001\002\000\006" +
    "\015\046\047\047\001\002\000\006\015\uffed\047\uffed\001" +
    "\002\000\012\006\024\012\020\026\015\052\023\001\002" +
    "\000\004\032\050\001\002\000\056\004\uffe6\005\uffe6\006" +
    "\uffe6\012\uffe6\013\uffe6\016\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\031\uffe6\032\uffe6\034\uffe6\035\uffe6\040\uffe6\043\uffe6\045" +
    "\uffe6\046\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6" +
    "\001\002\000\056\004\071\005\103\006\077\012\020\013" +
    "\072\016\053\023\074\025\064\026\015\031\065\032\054" +
    "\034\076\035\067\040\073\043\101\045\104\046\060\052" +
    "\023\053\070\054\066\055\062\057\056\001\002\000\042" +
    "\010\uffd8\011\215\017\uffd8\020\uffd8\024\uffd8\027\uffd8\030" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\001\002\000\004\050\214\001" +
    "\002\000\056\004\uffe6\005\uffe6\006\uffe6\012\uffe6\013\uffe6" +
    "\016\uffe6\023\uffe6\025\uffe6\026\uffe6\031\uffe6\032\uffe6\034" +
    "\uffe6\035\uffe6\040\uffe6\043\uffe6\045\uffe6\046\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\057\uffe6\001\002\000\040\010" +
    "\126\017\132\020\123\024\133\027\117\030\134\036\125" +
    "\037\135\040\116\041\122\042\124\060\121\061\131\062" +
    "\120\063\130\001\002\000\004\031\206\001\002\000\006" +
    "\005\201\030\033\001\002\000\034\004\071\005\103\006" +
    "\111\023\074\031\065\034\076\035\067\040\073\043\101" +
    "\050\177\053\070\054\066\055\062\001\002\000\050\010" +
    "\uffc6\015\uffc6\017\uffc6\020\uffc6\024\uffc6\027\uffc6\030\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\047" +
    "\uffc6\050\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\050\010\uffb3\015\uffb3\017\uffb3\020\uffb3\024\uffb3\027" +
    "\uffb3\030\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\044\uffb3\047\uffb3\050\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\001\002\000\050\010\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\024\uffc7\027\uffc7\030\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\044\uffc7\047\uffc7\050\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\001\002\000\004\031\170\001\002\000" +
    "\032\004\071\005\103\006\111\023\074\031\065\034\076" +
    "\035\067\040\073\043\101\053\070\054\066\055\062\001" +
    "\002\000\050\010\uffd6\015\uffd6\017\uffd6\020\uffd6\024\uffd6" +
    "\027\uffd6\030\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\044\uffd6\047\uffd6\050\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\001\002\000\032\004\071\005\103\006\111\023" +
    "\074\031\065\034\076\035\067\040\073\043\101\053\070" +
    "\054\066\055\062\001\002\000\050\010\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\024\uffb4\027\uffb4\030\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\044\uffb4\047\uffb4\050\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000\050\010\uffb5" +
    "\015\uffb5\017\uffb5\020\uffb5\024\uffb5\027\uffb5\030\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\047\uffb5" +
    "\050\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000" +
    "\004\050\164\001\002\000\032\004\071\005\103\006\111" +
    "\023\074\031\065\034\076\035\067\040\073\043\101\053" +
    "\070\054\066\055\062\001\002\000\050\010\uffb2\015\uffb2" +
    "\017\uffb2\020\uffb2\024\uffb2\027\uffb2\030\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\047\uffb2\050\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002\000\050\010" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\024\uffcf\027\uffcf\030\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\047" +
    "\uffcf\050\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002" +
    "\000\012\006\154\012\020\026\015\052\023\001\002\000" +
    "\010\005\uffe8\017\146\030\uffe8\001\002\000\042\010\uffd7" +
    "\017\uffd7\020\uffd7\024\uffd7\027\uffd7\030\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\050\153\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\001\002\000\050\010\uffb1\015\uffb1\017" +
    "\uffb1\020\uffb1\024\uffb1\027\uffb1\030\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\044\uffb1\047\uffb1\050\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002\000\056\004\uffe5" +
    "\005\uffe5\006\uffe5\012\uffe5\013\uffe5\016\uffe5\023\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\040\uffe5" +
    "\043\uffe5\045\uffe5\046\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\057\uffe5\001\002\000\054\010\uffcd\011\uffcd\015\uffcd" +
    "\017\uffcd\020\uffcd\024\uffcd\027\uffcd\030\uffcd\031\105\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\047\uffcd" +
    "\050\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\001\002\000" +
    "\020\006\ufff0\012\ufff0\026\ufff0\045\ufff0\051\ufff0\052\ufff0" +
    "\056\ufff0\001\002\000\036\004\071\005\103\006\111\015" +
    "\uffca\023\074\031\065\034\076\035\067\040\073\043\101" +
    "\047\uffca\053\070\054\066\055\062\001\002\000\050\010" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\024\uffd8\027\uffd8\030\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\047" +
    "\uffd8\050\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002" +
    "\000\044\010\126\015\uffc9\017\132\020\123\024\133\027" +
    "\117\030\134\036\125\037\135\040\116\041\122\042\124" +
    "\047\uffc9\060\121\061\131\062\120\063\130\001\002\000" +
    "\050\010\uffd7\015\uffd7\017\uffd7\020\uffd7\024\uffd7\027\uffd7" +
    "\030\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\047\uffd7\050\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\001\002\000\004\017\146\001\002\000\006\015\113\047" +
    "\114\001\002\000\032\004\071\005\103\006\111\023\074" +
    "\031\065\034\076\035\067\040\073\043\101\053\070\054" +
    "\066\055\062\001\002\000\050\010\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\024\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\044\uffc4\047\uffc4\050\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\001\002\000\044\010\126\015" +
    "\uffc8\017\132\020\123\024\133\027\117\030\134\036\125" +
    "\037\135\040\116\041\122\042\124\047\uffc8\060\121\061" +
    "\131\062\120\063\130\001\002\000\032\004\uffc1\005\uffc1" +
    "\006\uffc1\023\uffc1\031\uffc1\034\uffc1\035\uffc1\040\uffc1\043" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\001\002\000\032\004\uffbd" +
    "\005\uffbd\006\uffbd\023\uffbd\031\uffbd\034\uffbd\035\uffbd\040" +
    "\uffbd\043\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002\000\032" +
    "\004\uffba\005\uffba\006\uffba\023\uffba\031\uffba\034\uffba\035" +
    "\uffba\040\uffba\043\uffba\053\uffba\054\uffba\055\uffba\001\002" +
    "\000\032\004\uffc0\005\uffc0\006\uffc0\023\uffc0\031\uffc0\034" +
    "\uffc0\035\uffc0\040\uffc0\043\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\001\002\000\032\004\uffbe\005\uffbe\006\uffbe\023\uffbe\031" +
    "\uffbe\034\uffbe\035\uffbe\040\uffbe\043\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\001\002\000\032\004\uffb7\005\uffb7\006\uffb7\023" +
    "\uffb7\031\uffb7\034\uffb7\035\uffb7\040\uffb7\043\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\001\002\000\032\004\uffb6\005\uffb6\006" +
    "\uffb6\023\uffb6\031\uffb6\034\uffb6\035\uffb6\040\uffb6\043\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\001\002\000\032\004\uffbc\005" +
    "\uffbc\006\uffbc\023\uffbc\031\uffbc\034\uffbc\035\uffbc\040\uffbc" +
    "\043\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000\032\004" +
    "\uffc2\005\uffc2\006\uffc2\023\uffc2\031\uffc2\034\uffc2\035\uffc2" +
    "\040\uffc2\043\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\032\004\071\005\103\006\111\023\074\031\065\034\076" +
    "\035\067\040\073\043\101\053\070\054\066\055\062\001" +
    "\002\000\032\004\uffb8\005\uffb8\006\uffb8\023\uffb8\031\uffb8" +
    "\034\uffb8\035\uffb8\040\uffb8\043\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\001\002\000\032\004\uffbf\005\uffbf\006\uffbf\023\uffbf" +
    "\031\uffbf\034\uffbf\035\uffbf\040\uffbf\043\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\001\002\000\006\005\140\033\141\001\002" +
    "\000\032\004\uffbb\005\uffbb\006\uffbb\023\uffbb\031\uffbb\034" +
    "\uffbb\035\uffbb\040\uffbb\043\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\032\004\071\005\103\006\111\023\074\031" +
    "\065\034\076\035\067\040\073\043\101\053\070\054\066" +
    "\055\062\001\002\000\032\004\uffb9\005\uffb9\006\uffb9\023" +
    "\uffb9\031\uffb9\034\uffb9\035\uffb9\040\uffb9\043\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\001\002\000\042\010\126\017\132\020" +
    "\123\024\133\027\117\030\134\036\125\037\135\040\116" +
    "\041\122\042\124\044\137\060\121\061\131\062\120\063" +
    "\130\001\002\000\052\010\uffcb\011\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\024\uffcb\027\uffcb\030\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\044\uffcb\047\uffcb\050\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\001\002\000\054\010\uffcc\011" +
    "\uffcc\015\uffcc\017\uffcc\020\uffcc\024\uffcc\027\uffcc\030\uffcc" +
    "\031\142\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044" +
    "\uffcc\047\uffcc\050\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\001\002\000\050\010\uffd3\015\uffd3\017\uffd3\020\uffd3\024" +
    "\uffd3\027\uffd3\030\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\044\uffd3\047\uffd3\050\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\001\002\000\036\004\071\005\103\006\111" +
    "\015\uffca\023\074\031\065\034\076\035\067\040\073\043" +
    "\101\047\uffca\053\070\054\066\055\062\001\002\000\006" +
    "\015\113\047\144\001\002\000\050\010\uffc5\015\uffc5\017" +
    "\uffc5\020\uffc5\024\uffc5\027\uffc5\030\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\044\uffc5\047\uffc5\050\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\050\010\126" +
    "\015\uffd2\017\132\020\123\024\133\027\117\030\134\036" +
    "\125\037\135\040\116\041\122\042\124\044\uffd2\047\uffd2" +
    "\050\uffd2\060\121\061\131\062\120\063\130\001\002\000" +
    "\004\005\147\001\002\000\004\031\150\001\002\000\036" +
    "\004\071\005\103\006\111\015\uffca\023\074\031\065\034" +
    "\076\035\067\040\073\043\101\047\uffca\053\070\054\066" +
    "\055\062\001\002\000\006\015\113\047\152\001\002\000" +
    "\050\010\uffc3\015\uffc3\017\uffc3\020\uffc3\024\uffc3\027\uffc3" +
    "\030\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\044" +
    "\uffc3\047\uffc3\050\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\001\002\000\060\004\uffe3\005\uffe3\006\uffe3\012\uffe3\013" +
    "\uffe3\016\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\040\uffe3\043\uffe3\045\uffe3\046" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\001\002" +
    "\000\006\030\uffe8\031\161\001\002\000\004\030\156\001" +
    "\002\000\034\004\071\005\103\006\111\023\074\031\065" +
    "\034\076\035\067\040\073\043\101\044\034\053\070\054" +
    "\066\055\062\001\002\000\042\010\126\017\132\020\123" +
    "\024\133\027\117\030\134\036\125\037\135\040\116\041" +
    "\122\042\124\044\160\060\121\061\131\062\120\063\130" +
    "\001\002\000\050\010\uffd4\015\uffd4\017\uffd4\020\uffd4\024" +
    "\uffd4\027\uffd4\030\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\044\uffd4\047\uffd4\050\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\001\002\000\004\047\162\001\002\000\050" +
    "\010\uffd5\015\uffd5\017\uffd5\020\uffd5\024\uffd5\027\uffd5\030" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5" +
    "\047\uffd5\050\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\001" +
    "\002\000\050\010\uffd1\015\uffd1\017\132\020\uffd1\024\uffd1" +
    "\027\uffd1\030\134\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\044\uffd1\047\uffd1\050\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\001\002\000\060\004\uffdd\005\uffdd\006\uffdd\012" +
    "\uffdd\013\uffdd\016\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\035\uffdd\040\uffdd\043\uffdd\045" +
    "\uffdd\046\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd" +
    "\001\002\000\050\010\uffd0\015\uffd0\017\132\020\uffd0\024" +
    "\uffd0\027\uffd0\030\134\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\044\uffd0\047\uffd0\050\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\001\002\000\042\010\126\017\132\020\123" +
    "\024\133\027\117\030\134\036\125\037\135\040\116\041" +
    "\122\042\124\047\167\060\121\061\131\062\120\063\130" +
    "\001\002\000\050\010\uffce\015\uffce\017\uffce\020\uffce\024" +
    "\uffce\027\uffce\030\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\044\uffce\047\uffce\050\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\001\002\000\032\004\071\005\103\006\111" +
    "\023\074\031\065\034\076\035\067\040\073\043\101\053" +
    "\070\054\066\055\062\001\002\000\042\010\126\017\132" +
    "\020\123\024\133\027\117\030\134\036\125\037\135\040" +
    "\116\041\122\042\124\047\172\060\121\061\131\062\120" +
    "\063\130\001\002\000\054\004\071\005\103\006\077\012" +
    "\020\013\072\016\053\023\074\025\064\026\015\031\065" +
    "\032\054\034\076\035\067\040\073\043\101\046\060\052" +
    "\023\053\070\054\066\055\062\057\056\001\002\000\060" +
    "\004\uffe0\005\uffe0\006\uffe0\012\uffe0\013\uffe0\016\uffe0\022" +
    "\174\023\uffe0\025\uffe0\026\uffe0\031\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\040\uffe0\043\uffe0\045\uffe0\046\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\057\uffe0\001\002\000\054\004\071" +
    "\005\103\006\077\012\020\013\072\016\053\023\074\025" +
    "\064\026\015\031\065\032\054\034\076\035\067\040\073" +
    "\043\101\046\060\052\023\053\070\054\066\055\062\057" +
    "\056\001\002\000\060\004\uffdf\005\uffdf\006\uffdf\012\uffdf" +
    "\013\uffdf\016\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\040\uffdf\043\uffdf\045\uffdf" +
    "\046\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\001" +
    "\002\000\042\010\126\017\132\020\123\024\133\027\117" +
    "\030\134\036\125\037\135\040\116\041\122\042\124\050" +
    "\200\060\121\061\131\062\120\063\130\001\002\000\060" +
    "\004\uffe2\005\uffe2\006\uffe2\012\uffe2\013\uffe2\016\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\035\uffe2\040\uffe2\043\uffe2\045\uffe2\046\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\057\uffe2\001\002\000\060\004\uffe1" +
    "\005\uffe1\006\uffe1\012\uffe1\013\uffe1\016\uffe1\022\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1" +
    "\040\uffe1\043\uffe1\045\uffe1\046\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\057\uffe1\001\002\000\006\011\203\050\202" +
    "\001\002\000\060\004\uffda\005\uffda\006\uffda\012\uffda\013" +
    "\uffda\016\uffda\022\uffda\023\uffda\025\uffda\026\uffda\031\uffda" +
    "\032\uffda\034\uffda\035\uffda\040\uffda\043\uffda\045\uffda\046" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda\001\002" +
    "\000\032\004\071\005\103\006\111\023\074\031\065\034" +
    "\076\035\067\040\073\043\101\053\070\054\066\055\062" +
    "\001\002\000\042\010\126\017\132\020\123\024\133\027" +
    "\117\030\134\036\125\037\135\040\116\041\122\042\124" +
    "\050\205\060\121\061\131\062\120\063\130\001\002\000" +
    "\060\004\uffd9\005\uffd9\006\uffd9\012\uffd9\013\uffd9\016\uffd9" +
    "\022\uffd9\023\uffd9\025\uffd9\026\uffd9\031\uffd9\032\uffd9\034" +
    "\uffd9\035\uffd9\040\uffd9\043\uffd9\045\uffd9\046\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\057\uffd9\001\002\000\032\004" +
    "\071\005\103\006\111\023\074\031\065\034\076\035\067" +
    "\040\073\043\101\053\070\054\066\055\062\001\002\000" +
    "\042\010\126\017\132\020\123\024\133\027\117\030\134" +
    "\036\125\037\135\040\116\041\122\042\124\047\210\060" +
    "\121\061\131\062\120\063\130\001\002\000\054\004\071" +
    "\005\103\006\077\012\020\013\072\016\053\023\074\025" +
    "\064\026\015\031\065\032\054\034\076\035\067\040\073" +
    "\043\101\046\060\052\023\053\070\054\066\055\062\057" +
    "\056\001\002\000\060\004\uffde\005\uffde\006\uffde\012\uffde" +
    "\013\uffde\016\uffde\022\uffde\023\uffde\025\uffde\026\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\040\uffde\043\uffde\045\uffde" +
    "\046\uffde\052\uffde\053\uffde\054\uffde\055\uffde\057\uffde\001" +
    "\002\000\056\004\071\005\103\006\077\012\020\013\072" +
    "\016\053\023\074\025\064\026\015\031\065\032\054\034" +
    "\076\035\067\040\073\043\101\045\213\046\060\052\023" +
    "\053\070\054\066\055\062\057\056\001\002\000\060\004" +
    "\uffdb\005\uffdb\006\uffdb\012\uffdb\013\uffdb\016\uffdb\022\uffdb" +
    "\023\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\034\uffdb\035" +
    "\uffdb\040\uffdb\043\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\057\uffdb\001\002\000\060\004\uffdc\005" +
    "\uffdc\006\uffdc\012\uffdc\013\uffdc\016\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\026\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\040" +
    "\uffdc\043\uffdc\045\uffdc\046\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\057\uffdc\001\002\000\032\004\071\005\103\006" +
    "\111\023\074\031\065\034\076\035\067\040\073\043\101" +
    "\053\070\054\066\055\062\001\002\000\042\010\126\017" +
    "\132\020\123\024\133\027\117\030\134\036\125\037\135" +
    "\040\116\041\122\042\124\050\217\060\121\061\131\062" +
    "\120\063\130\001\002\000\060\004\uffe4\005\uffe4\006\uffe4" +
    "\012\uffe4\013\uffe4\016\uffe4\022\uffe4\023\uffe4\025\uffe4\026" +
    "\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\040\uffe4\043\uffe4" +
    "\045\uffe4\046\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057" +
    "\uffe4\001\002\000\006\015\uffec\047\uffec\001\002\000\010" +
    "\015\uffef\031\uffef\047\uffef\001\002\000\020\006\ufff3\012" +
    "\ufff3\026\ufff3\045\ufff3\051\ufff3\052\ufff3\056\ufff3\001\002" +
    "\000\016\006\024\012\020\015\uffee\026\015\047\uffee\052" +
    "\023\001\002\000\006\015\046\047\225\001\002\000\004" +
    "\032\226\001\002\000\056\004\uffe6\005\uffe6\006\uffe6\012" +
    "\uffe6\013\uffe6\016\uffe6\023\uffe6\025\uffe6\026\uffe6\031\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\040\uffe6\043\uffe6\045\uffe6\046" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\001\002" +
    "\000\056\004\071\005\103\006\077\012\020\013\072\016" +
    "\053\023\074\025\064\026\015\031\065\032\054\034\076" +
    "\035\067\040\073\043\101\045\230\046\060\052\023\053" +
    "\070\054\066\055\062\057\056\001\002\000\020\006\ufff1" +
    "\012\ufff1\026\ufff1\045\ufff1\051\ufff1\052\ufff1\056\ufff1\001" +
    "\002\000\004\045\ufff9\001\002\000\004\032\233\001\002" +
    "\000\016\006\024\012\020\026\015\051\017\052\023\056" +
    "\021\001\002\000\004\045\235\001\002\000\006\002\ufffb" +
    "\014\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\026\006\013\007\021\010\024" +
    "\012\015\020\025\001\001\000\016\005\026\006\013\007" +
    "\021\010\230\012\015\020\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\221\012\015\020\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\031\001\001\000\016\005\026\006\013\007\021" +
    "\010\027\012\015\020\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\044" +
    "\013\043\020\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\217\020\042\001\001" +
    "\000\002\001\001\000\004\017\050\001\001\000\022\014" +
    "\051\015\054\016\101\020\056\022\077\023\060\024\062" +
    "\025\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\211\001\001\000\004\026\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\105\015\175\022" +
    "\107\023\060\024\062\025\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\105\015\165\022\107\023\060\024\062\025\074" +
    "\001\001\000\002\001\001\000\016\014\105\015\164\022" +
    "\107\023\060\024\062\025\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\105\015" +
    "\162\022\107\023\060\024\062\025\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\105\015\106\021\111\022\107\023\060\024\062\025\074" +
    "\001\001\000\002\001\001\000\004\026\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\105\015\114\022\107\023\060\024\062\025\074\001" +
    "\001\000\002\001\001\000\004\026\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\105\015" +
    "\144\022\107\023\060\024\062\025\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\105\015\135\022\107\023\060\024\062" +
    "\025\074\001\001\000\002\001\001\000\004\026\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\105\015\106\021\142\022\107\023\060\024" +
    "\062\025\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\105\015\106\021\150\022\107\023\060" +
    "\024\062\025\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\105\015\156\022\107\023\060\024\062\025" +
    "\074\001\001\000\004\026\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\126\001" +
    "\001\000\002\001\001\000\004\026\126\001\001\000\004" +
    "\026\126\001\001\000\002\001\001\000\016\014\105\015" +
    "\170\022\107\023\060\024\062\025\074\001\001\000\004" +
    "\026\126\001\001\000\022\014\051\015\054\016\172\020" +
    "\056\022\077\023\060\024\062\025\074\001\001\000\002" +
    "\001\001\000\022\014\051\015\054\016\174\020\056\022" +
    "\077\023\060\024\062\025\074\001\001\000\002\001\001" +
    "\000\004\026\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\105" +
    "\015\203\022\107\023\060\024\062\025\074\001\001\000" +
    "\004\026\126\001\001\000\002\001\001\000\016\014\105" +
    "\015\206\022\107\023\060\024\062\025\074\001\001\000" +
    "\004\026\126\001\001\000\022\014\051\015\054\016\210" +
    "\020\056\022\077\023\060\024\062\025\074\001\001\000" +
    "\002\001\001\000\022\014\051\015\054\016\101\020\056" +
    "\022\077\023\060\024\062\025\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\105\015\215\022\107" +
    "\023\060\024\062\025\074\001\001\000\004\026\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\044\013\223\020\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\226" +
    "\001\001\000\022\014\051\015\054\016\101\020\056\022" +
    "\077\023\060\024\062\025\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\026\006" +
    "\013\007\021\010\233\012\015\020\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s)  {
		Token tok = (Token) s;
		System.out.println(" Line " + tok.getLine()+": Syntax error; unexpected " + tok);
		try{
			printToDebugFile();
		}
		catch (IOException e){
			System.out.println("Writing debug file failed");
		}
	
	}
	
	
	StringBuffer debugs=new StringBuffer("");
		
	public void printToDebugFile() throws IOException{
	File file = new File("debug.txt");	
	// if file doesnt exists, then create it
	if (!file.exists()) {
		file.createNewFile();
	}
	
	FileWriter fw = new FileWriter(file.getAbsoluteFile());
	BufferedWriter bw = new BufferedWriter(fw);
	bw.write(debugs.toString());
	bw.close();
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= NULL 
            {
              Literal RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new LiteralNull(parser.getLine());
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = "+lit);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= FALSE 
            {
              Literal RESULT =null;
		
		RESULT = new LiteralBoolean(parser.getLine(), false);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = false ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= TRUE 
            {
              Literal RESULT =null;
		
		RESULT = new LiteralBoolean(parser.getLine(), true);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = true ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= QUOTE 
            {
              Literal RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new LiteralString(litleft, lit);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for lit = "+lit);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= NUMBER 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = new LiteralNumber(nleft, n);
		parser.debugs.append("\n" + parser.getLine()+" Reduced lit for num. literal = "+n);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= NEQUAL 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.NEQUAL;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= EQUAL 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.EQUAL;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= LE 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LE;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= LT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= GE 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.GE;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= GT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.GT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= LOR 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LOR;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= LAND 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LAND;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= MOD 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MOD;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= DIV 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.DIV;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= MULT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MULT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= MINUS 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MINUS;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= PLUS 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.PLUS;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // staticCall ::= CLASS_ID DOT VAR LPAREN args_list RPAREN 
            {
              CallStatic RESULT =null;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallStatic(cl_idleft, cl_id, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallStatic. call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticCall",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // virtualCall ::= VAR LPAREN args_list RPAREN 
            {
              CallVirtual RESULT =null;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallVirtual(meth_idleft, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallVirtual (no instance). call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // virtualCall ::= expr DOT VAR LPAREN args_list RPAREN 
            {
              CallVirtual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallVirtual(e1left, e1, meth_id, arguments);
	parser.debugs.append("\n" + parser.getLine()+" Reduced CallVirtual (object instance). call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // call ::= virtualCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallVirtual c = (CallVirtual)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = c;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call ::= staticCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallStatic c = (CallStatic)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = c;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args_list ::= args_list COMMA expr 
            {
              List<Expr> RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> list1 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int new_argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int new_argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr new_arg = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					// add the n-th argument
					list1.add(new_arg);
					RESULT = list1;
					parser.debugs.append("\n" +"Reduced rule: list of arguments."
					+ "added argument: " + new_arg);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args_list ::= expr 
            {
              List<Expr> RESULT =null;
		int new_argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int new_argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr new_arg = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					// add the single argument
					List<Expr> list1 = new ArrayList <Expr>();
					list1.add(new_arg);
					RESULT = list1;
					parser.debugs.append("\n" +"Reduced rule: one argument: " + new_arg);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // args_list ::= 
            {
              List<Expr> RESULT =null;
		 
					RESULT = new ArrayList <Expr> ();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location ::= expr LB expr RB 
            {
              Location RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int subscriptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subscriptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr subscript = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new LocationArrSubscript(arrleft, arr, subscript);
			parser.debugs.append("\n" +"reduced rule- Location Array subscript." 
			+ " Array expression: " +  arr 
			+ ", subscript expression: " + subscript) ; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= expr DOT VAR 
            {
              Location RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 			RESULT = new LocationExpressionMember(exleft, ex, v);
			parser.debugs.append("\n" +"reduced rule- Location Expr.Member for expression: " 
			+ ex + "and member: " + v) ; 
 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= VAR 
            {
              Location RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = new LocationId(vleft, v);
			parser.debugs.append("\n" +"reduced rule- Location ID: " + v) ; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = e;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= literal 
            {
              Expr RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = lit;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LNEG expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(e1left, e1, Operator.LNEG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(e1left, e1, Operator.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpExpr(e1left, e1, e2, op);
		   parser.debugs.append("\n" + parser.getLine()+" Reduced rule e1 "+op+" e2 for e1=" + e1 + " and e2="+e2);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ln = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new ExprLength (e1left, e1);
			parser.debugs.append("\n" +"Reduced rule 'length' for expr: " + e1 ) ;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW type LB expr RB 
            {
              Expr RESULT =null;
		int nwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new NewArray(nwleft, tp, e1);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'new array instance'"
			+ " for type " + tp.toString() + ", " 
			+ "array size expression: " + e1.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NEW CLASS_ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int nwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new NewClassInstance(nwleft, cl_id);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'new' for class " + cl_id);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= THIS 
            {
              Expr RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new LocationId (thleft, "this");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'this' ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= call 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = c;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= location 
            {
              Expr RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = loc;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= type VAR ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtDeclareVar(tpleft, tp, id, val);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced statement: variable declaration. + init."
	 + RESULT.toString());
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= type VAR SEMI 
            {
              Stmt RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtDeclareVar(tpleft, tp, id);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced statement: variable declaration. "
	 + RESULT.toString());
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= LCBR stmt_list RCBR 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 	RESULT= sl;
		 parser.debugs.append("\n" + parser.getLine()+" Reduced statements block. ");
		 //(the list itself will be printed and returned in inner rule.)
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= CONTINUE SEMI 
            {
              Stmt RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtContinue(coleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced continue;");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtBreak(brleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced break;");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtWhile(whleft, condition, commands);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced while statement.");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commands_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commands_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands_else = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtIf(ileft, condition, commands, commands_else);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced if/else statement."); //TODO print details.
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtIf(ileft, condition, commands);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced if statemnt.");	//TODO print details.
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new ReturnExprStatement(rleft, e);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced return expression for expression: "
	 + e.toString () );
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new ReturnVoidStatement(rleft);
	 parser.debugs.append("\n" + parser.getLine()+" Reduced return;"); 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= call SEMI 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new CallStatement(cleft, c);
	 //TODO print details
	 parser.debugs.append("\n" + parser.getLine()+" Reduced call statement for call");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= location ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr value = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new AssignStmt(locleft, loc, value);
	parser.debugs.append("\n" + parser.getLine()+" Reduced assignment stmt. assign to location: " 
	 + loc + " , assign value: " + value);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		sl.addStmt(s);
		RESULT = sl;
		parser.debugs.append("\n" + parser.getLine()+" reduced list of statements. new statement: "
		+ s ); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_list ::= 
            {
              StmtList RESULT =null;
		
		RESULT = new StmtList(parser.getLine()); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		 	RESULT = new TypeArray(tpleft, tp);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'type array' of type " + tp);	
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Type (cl_idleft, cl_id);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'class type': " + cl_id);
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Type (sleft, "string");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'string' ");
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Type (bleft, "boolean");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'boolean' ");
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Type (ileft, "int");
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'int'");
						
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalList ::= formalList COMMA formal 
            {
              FormalsList RESULT =null;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalsList fList = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int frmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int frmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal frm = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			fList.addFrml(frm); 
			RESULT = fList; 
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals COMMA type VAR' ");
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalList ::= formal 
            {
              FormalsList RESULT =null;
		int frmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int frmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal frm = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new FormalsList(frmleft, frm);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals list' single formal ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formalList ::= 
            {
              FormalsList RESULT =null;
		
			RESULT = new FormalsList(parser.getLine());
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formals list' no formals ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal ::= type VAR 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT=new Formal (tleft, t, new VarExpr(parser.getLine(), v));
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'formal'. "
		+ "type: " + t + ", id: " + v ); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDecl ::= VOID VAR LPAREN formalList RPAREN LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int voright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object vo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FormalsList frmls = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList slist = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Formal f=new Formal (method_nameleft, 
				new Type(voleft, "void"), 
				new VarExpr(method_nameleft, method_name));
			RESULT = new Method (method_nameleft, f, frmls, slist);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule for method decl. VOID. method id: " + method_name);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDecl ::= formal LPAREN formalList RPAREN LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FormalsList frmls = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList slist = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new Method (fleft, f, frmls, slist);
			parser.debugs.append("\n" + parser.getLine()+" Reduced rule for method decl. method id : " + f.frmName);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= methodDecl 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	m.isStatic=false; RESULT=m;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'methodDecl'");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= STATIC methodDecl 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	m.isStatic=true; RESULT=m;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'STATIC methodDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idList ::= VAR 
            {
              List<VarExpr> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		List l= new ArrayList<VarExpr>();
		l.add (new VarExpr(vleft, v));
		RESULT=l;
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'id': " + v);		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idList ::= idList COMMA VAR 
            {
              List<VarExpr> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<VarExpr> idl = (List<VarExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	idl.add(new VarExpr(vleft, v)); RESULT= idl;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'idList'. curr. variable: " + v);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= type idList SEMI 
            {
              Field RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VarExpr> idl = (List<VarExpr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT= new Field(tleft, t, idl);
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'type idList SEMI' ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldMethodList ::= method 
            {
              FieldMethodList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new FieldMethodList(mleft, m);
		 	parser.debugs.append("\n" + parser.getLine()+" Reduced rule: method"); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldMethodList ::= field 
            {
              FieldMethodList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new FieldMethodList(fleft, f);
		 	parser.debugs.append("\n" + parser.getLine()+" Reduced rule: field");
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldMethodList ::= method fieldMethodList 
            {
              FieldMethodList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldMethodList fmList = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				fmList.addFieldMethod(m); RESULT = fmList; 
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: method fieldMethodList");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldMethodList ::= field fieldMethodList 
            {
              FieldMethodList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldMethodList fmList = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				fmList.addFieldMethod(f); RESULT = fmList; 
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: field fieldMethodList");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR 
            {
              Class RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ecidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ecidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ecid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fml = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT= new Class (cidleft, cid, ecid, fml);
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR fieldMethodList RCBR 
            {
              Class RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fml = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT= new Class (cidleft, cid, fml);
				parser.debugs.append("\n" + parser.getLine()+" Reduced rule: CLASS CLASS_ID LCBR fieldMethodList RCBR");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= classDecl 
            {
              List<Class> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Class c = (Class)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		List <Class> l= new ArrayList<Class> (cleft);
		l.add(c);
		RESULT=l;
		parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= classDeclList classDecl 
            {
              List<Class> RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Class> cdl = (List<Class>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Class cd = (Class)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	cdl.add(cd); RESULT= cdl;
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDeclList COMMA classDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Program RESULT =null;
		
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule '' (empty program");
	RESULT= new Program(parser.getLine());
	parser.printToDebugFile();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classDeclList 
            {
              Program RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Class> cdl = (List<Class>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	parser.debugs.append("\n" + parser.getLine()+" Reduced rule 'classDeclList'");
	RESULT= new Program(cdlleft, cdl);
	parser.printToDebugFile();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

