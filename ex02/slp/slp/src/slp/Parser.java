
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 28 20:20:11 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 28 20:20:11 IST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\003\007" +
    "\000\002\003\011\000\002\010\004\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\005\005\000\002" +
    "\011\005\000\002\011\003\000\002\006\004\000\002\006" +
    "\003\000\002\007\011\000\002\007\012\000\002\012\004" +
    "\000\002\013\003\000\002\013\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\017\002\000\002\017\004\000\002\016" +
    "\006\000\002\016\004\000\002\016\004\000\002\016\005" +
    "\000\002\016\007\000\002\016\011\000\002\016\007\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\007\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\006\000\002\015\007" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\014\003\000\002\014\005\000\002\014" +
    "\006\000\002\021\002\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\010\000" +
    "\002\023\006\000\002\024\010\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\060\002\uffe7\004\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\014\uffe7\015\uffe7\020\uffe7\025\uffe7\027\uffe7\030\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\037\uffe7\042\uffe7\045\uffe7\050" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\001\002" +
    "\000\060\002\030\004\023\006\031\007\043\010\040\014" +
    "\026\015\032\020\006\025\033\027\020\030\011\033\021" +
    "\034\007\036\036\037\024\042\034\045\041\050\014\054" +
    "\027\055\025\056\022\057\016\061\012\001\002\000\042" +
    "\012\uffd9\013\160\021\uffd9\022\uffd9\026\uffd9\031\uffd9\032" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\001\002\000\004\052\157\001" +
    "\002\000\060\004\uffe7\006\uffe7\007\uffe7\010\uffe7\014\uffe7" +
    "\015\uffe7\020\uffe7\025\uffe7\027\uffe7\030\uffe7\033\uffe7\034" +
    "\uffe7\036\uffe7\037\uffe7\042\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\001\002\000" +
    "\040\012\065\021\071\022\062\026\072\031\056\032\073" +
    "\040\064\041\074\042\055\043\061\044\063\062\060\063" +
    "\070\064\057\065\067\001\002\000\006\007\uffec\032\uffec" +
    "\001\002\000\004\033\151\001\002\000\006\007\143\032" +
    "\144\001\002\000\036\004\023\006\031\007\043\010\050" +
    "\025\033\033\021\036\036\037\024\042\034\045\041\052" +
    "\141\055\025\056\022\057\016\001\002\000\050\012\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\026\uffc6\031\uffc6\032\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\051\uffc6" +
    "\052\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000" +
    "\050\012\uffb3\017\uffb3\021\uffb3\022\uffb3\026\uffb3\031\uffb3" +
    "\032\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046" +
    "\uffb3\051\uffb3\052\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\001\002\000\050\012\uffc7\017\uffc7\021\uffc7\022\uffc7\026" +
    "\uffc7\031\uffc7\032\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\046\uffc7\051\uffc7\052\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\001\002\000\004\033\132\001\002\000\034" +
    "\004\023\006\031\007\043\010\050\025\033\033\021\036" +
    "\036\037\024\042\034\045\041\055\025\056\022\057\016" +
    "\001\002\000\050\012\uffd7\017\uffd7\021\uffd7\022\uffd7\026" +
    "\uffd7\031\uffd7\032\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\051\uffd7\052\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\001\002\000\004\033\126\001\002\000\034" +
    "\004\023\006\031\007\043\010\050\025\033\033\021\036" +
    "\036\037\024\042\034\045\041\055\025\056\022\057\016" +
    "\001\002\000\050\012\uffb4\017\uffb4\021\uffb4\022\uffb4\026" +
    "\uffb4\031\uffb4\032\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\046\uffb4\051\uffb4\052\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\001\002\000\006\007\uffeb\032\uffeb\001\002" +
    "\000\006\007\uffea\032\uffea\001\002\000\004\002\001\001" +
    "\002\000\050\012\uffb5\017\uffb5\021\uffb5\022\uffb5\026\uffb5" +
    "\031\uffb5\032\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\046\uffb5\051\uffb5\052\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\001\002\000\004\052\124\001\002\000\050\012" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\026\uffb2\031\uffb2\032\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\051" +
    "\uffb2\052\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\034\004\023\006\031\007\043\010\050\025\033\033" +
    "\021\036\036\037\024\042\034\045\041\055\025\056\022" +
    "\057\016\001\002\000\050\012\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\026\uffd0\031\uffd0\032\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\046\uffd0\051\uffd0\052\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\001\002\000\012\010\114\014\026" +
    "\030\011\054\027\001\002\000\042\012\uffd8\021\uffd8\022" +
    "\uffd8\026\uffd8\031\uffd8\032\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\052\112\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\001\002\000\010\007\uffe9\021\105\032\uffe9\001\002" +
    "\000\050\012\uffb1\017\uffb1\021\uffb1\022\uffb1\026\uffb1\031" +
    "\uffb1\032\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\051\uffb1\052\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\001\002\000\062\002\uffe6\004\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\014\uffe6\015\uffe6\020\uffe6\025\uffe6\027\uffe6\030" +
    "\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\042\uffe6\045\uffe6" +
    "\047\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\061" +
    "\uffe6\001\002\000\054\012\uffcd\013\uffcd\017\uffcd\021\uffcd" +
    "\022\uffcd\026\uffcd\031\uffcd\032\uffcd\033\044\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\051\uffcd\052\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000\040\004" +
    "\023\006\031\007\043\010\050\017\uffca\025\033\033\021" +
    "\036\036\037\024\042\034\045\041\051\uffca\055\025\056" +
    "\022\057\016\001\002\000\050\012\uffd9\017\uffd9\021\uffd9" +
    "\022\uffd9\026\uffd9\031\uffd9\032\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\046\uffd9\051\uffd9\052\uffd9\062\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\001\002\000\044\012\065\017" +
    "\uffc9\021\071\022\062\026\072\031\056\032\073\040\064" +
    "\041\074\042\055\043\061\044\063\051\uffc9\062\060\063" +
    "\070\064\057\065\067\001\002\000\050\012\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\026\uffd8\031\uffd8\032\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\051\uffd8\052\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\001\002\000\004\021" +
    "\105\001\002\000\006\017\052\051\053\001\002\000\034" +
    "\004\023\006\031\007\043\010\050\025\033\033\021\036" +
    "\036\037\024\042\034\045\041\055\025\056\022\057\016" +
    "\001\002\000\050\012\uffc4\017\uffc4\021\uffc4\022\uffc4\026" +
    "\uffc4\031\uffc4\032\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\046\uffc4\051\uffc4\052\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\001\002\000\044\012\065\017\uffc8\021\071" +
    "\022\062\026\072\031\056\032\073\040\064\041\074\042" +
    "\055\043\061\044\063\051\uffc8\062\060\063\070\064\057" +
    "\065\067\001\002\000\034\004\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\025\uffc1\033\uffc1\036\uffc1\037\uffc1\042\uffc1\045\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\001\002\000\034\004\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\025\uffbd\033\uffbd\036\uffbd\037\uffbd" +
    "\042\uffbd\045\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000" +
    "\034\004\uffba\006\uffba\007\uffba\010\uffba\025\uffba\033\uffba" +
    "\036\uffba\037\uffba\042\uffba\045\uffba\055\uffba\056\uffba\057" +
    "\uffba\001\002\000\034\004\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\025\uffc0\033\uffc0\036\uffc0\037\uffc0\042\uffc0\045\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\001\002\000\034\004\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\025\uffbe\033\uffbe\036\uffbe\037\uffbe\042" +
    "\uffbe\045\uffbe\055\uffbe\056\uffbe\057\uffbe\001\002\000\034" +
    "\004\uffb7\006\uffb7\007\uffb7\010\uffb7\025\uffb7\033\uffb7\036" +
    "\uffb7\037\uffb7\042\uffb7\045\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\001\002\000\034\004\uffb6\006\uffb6\007\uffb6\010\uffb6\025" +
    "\uffb6\033\uffb6\036\uffb6\037\uffb6\042\uffb6\045\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\001\002\000\034\004\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\025\uffbc\033\uffbc\036\uffbc\037\uffbc\042\uffbc" +
    "\045\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000\034\004" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\025\uffc2\033\uffc2\036\uffc2" +
    "\037\uffc2\042\uffc2\045\uffc2\055\uffc2\056\uffc2\057\uffc2\001" +
    "\002\000\034\004\023\006\031\007\043\010\050\025\033" +
    "\033\021\036\036\037\024\042\034\045\041\055\025\056" +
    "\022\057\016\001\002\000\034\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\025\uffb8\033\uffb8\036\uffb8\037\uffb8\042\uffb8\045" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\001\002\000\034\004\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\025\uffbf\033\uffbf\036\uffbf\037" +
    "\uffbf\042\uffbf\045\uffbf\055\uffbf\056\uffbf\057\uffbf\001\002" +
    "\000\006\007\077\035\100\001\002\000\034\004\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\025\uffbb\033\uffbb\036\uffbb\037\uffbb" +
    "\042\uffbb\045\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000" +
    "\034\004\023\006\031\007\043\010\050\025\033\033\021" +
    "\036\036\037\024\042\034\045\041\055\025\056\022\057" +
    "\016\001\002\000\034\004\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\025\uffb9\033\uffb9\036\uffb9\037\uffb9\042\uffb9\045\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\001\002\000\042\012\065\021\071" +
    "\022\062\026\072\031\056\032\073\040\064\041\074\042" +
    "\055\043\061\044\063\046\076\062\060\063\070\064\057" +
    "\065\067\001\002\000\052\012\uffcb\013\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\026\uffcb\031\uffcb\032\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\046\uffcb\051\uffcb\052\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\054\012\uffcc" +
    "\013\uffcc\017\uffcc\021\uffcc\022\uffcc\026\uffcc\031\uffcc\032" +
    "\uffcc\033\101\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\051\uffcc\052\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\050\012\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\026\uffd4\031\uffd4\032\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\046\uffd4\051\uffd4\052\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\001\002\000\040\004\023\006\031\007" +
    "\043\010\050\017\uffca\025\033\033\021\036\036\037\024" +
    "\042\034\045\041\051\uffca\055\025\056\022\057\016\001" +
    "\002\000\006\017\052\051\103\001\002\000\050\012\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\026\uffc5\031\uffc5\032\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\051\uffc5" +
    "\052\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000" +
    "\050\012\065\017\uffd3\021\071\022\062\026\072\031\056" +
    "\032\073\040\064\041\074\042\055\043\061\044\063\046" +
    "\uffd3\051\uffd3\052\uffd3\062\060\063\070\064\057\065\067" +
    "\001\002\000\004\007\106\001\002\000\004\033\107\001" +
    "\002\000\040\004\023\006\031\007\043\010\050\017\uffca" +
    "\025\033\033\021\036\036\037\024\042\034\045\041\051" +
    "\uffca\055\025\056\022\057\016\001\002\000\006\017\052" +
    "\051\111\001\002\000\050\012\uffc3\017\uffc3\021\uffc3\022" +
    "\uffc3\026\uffc3\031\uffc3\032\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\046\uffc3\051\uffc3\052\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\001\002\000\064\002\uffe4\004\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\014\uffe4\015\uffe4\020\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\033\uffe4\034\uffe4\036\uffe4" +
    "\037\uffe4\042\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\061\uffe4\001\002\000\004\032\117" +
    "\001\002\000\006\032\uffe9\033\115\001\002\000\004\051" +
    "\116\001\002\000\050\012\uffd6\017\uffd6\021\uffd6\022\uffd6" +
    "\026\uffd6\031\uffd6\032\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\051\uffd6\052\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\001\002\000\036\004\023\006\031\007" +
    "\043\010\050\025\033\033\021\036\036\037\024\042\034" +
    "\045\041\046\121\055\025\056\022\057\016\001\002\000" +
    "\042\012\065\021\071\022\062\026\072\031\056\032\073" +
    "\040\064\041\074\042\055\043\061\044\063\046\122\062" +
    "\060\063\070\064\057\065\067\001\002\000\006\007\uffe8" +
    "\032\uffe8\001\002\000\050\012\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\026\uffd5\031\uffd5\032\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\046\uffd5\051\uffd5\052\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\001\002\000\050\012\uffd2\017\uffd2" +
    "\021\071\022\uffd2\026\uffd2\031\uffd2\032\073\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\051\uffd2\052\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\001\002\000\064\002" +
    "\uffde\004\uffde\006\uffde\007\uffde\010\uffde\014\uffde\015\uffde" +
    "\020\uffde\024\uffde\025\uffde\027\uffde\030\uffde\033\uffde\034" +
    "\uffde\036\uffde\037\uffde\042\uffde\045\uffde\047\uffde\050\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\061\uffde\001\002\000" +
    "\050\012\065\017\uffd1\021\071\022\062\026\072\031\056" +
    "\032\073\040\064\041\074\042\055\043\061\044\063\046" +
    "\uffd1\051\uffd1\052\uffd1\062\060\063\070\064\057\065\067" +
    "\001\002\000\004\051\127\001\002\000\050\012\uffce\017" +
    "\uffce\021\uffce\022\uffce\026\uffce\031\uffce\032\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce\051\uffce\052" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\001\002\000\042" +
    "\012\065\021\071\022\062\026\072\031\056\032\073\040" +
    "\064\041\074\042\055\043\061\044\063\051\131\062\060" +
    "\063\070\064\057\065\067\001\002\000\050\012\uffcf\017" +
    "\uffcf\021\uffcf\022\uffcf\026\uffcf\031\uffcf\032\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\051\uffcf\052" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\001\002\000\034" +
    "\004\023\006\031\007\043\010\050\025\033\033\021\036" +
    "\036\037\024\042\034\045\041\055\025\056\022\057\016" +
    "\001\002\000\042\012\065\021\071\022\062\026\072\031" +
    "\056\032\073\040\064\041\074\042\055\043\061\044\063" +
    "\051\134\062\060\063\070\064\057\065\067\001\002\000" +
    "\056\004\023\006\031\007\043\010\040\014\026\015\032" +
    "\020\006\025\033\027\020\030\011\033\021\034\007\036" +
    "\036\037\024\042\034\045\041\050\014\054\027\055\025" +
    "\056\022\057\016\061\012\001\002\000\064\002\uffe1\004" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\014\uffe1\015\uffe1\020\uffe1" +
    "\024\136\025\uffe1\027\uffe1\030\uffe1\033\uffe1\034\uffe1\036" +
    "\uffe1\037\uffe1\042\uffe1\045\uffe1\047\uffe1\050\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\061\uffe1\001\002\000\056\004" +
    "\023\006\031\007\043\010\040\014\026\015\032\020\006" +
    "\025\033\027\020\030\011\033\021\034\007\036\036\037" +
    "\024\042\034\045\041\050\014\054\027\055\025\056\022" +
    "\057\016\061\012\001\002\000\064\002\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\014\uffe0\015\uffe0\020\uffe0\024\uffe0" +
    "\025\uffe0\027\uffe0\030\uffe0\033\uffe0\034\uffe0\036\uffe0\037" +
    "\uffe0\042\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\001\002\000\042\012\065\021" +
    "\071\022\062\026\072\031\056\032\073\040\064\041\074" +
    "\042\055\043\061\044\063\052\142\062\060\063\070\064" +
    "\057\065\067\001\002\000\064\002\uffe3\004\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\014\uffe3\015\uffe3\020\uffe3\024\uffe3\025" +
    "\uffe3\027\uffe3\030\uffe3\033\uffe3\034\uffe3\036\uffe3\037\uffe3" +
    "\042\uffe3\045\uffe3\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\061\uffe3\001\002\000\064\002\uffe2\004\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\014\uffe2\015\uffe2\020\uffe2\024" +
    "\uffe2\025\uffe2\027\uffe2\030\uffe2\033\uffe2\034\uffe2\036\uffe2" +
    "\037\uffe2\042\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\061\uffe2\001\002\000\006\013\146" +
    "\052\145\001\002\000\004\046\121\001\002\000\064\002" +
    "\uffdb\004\uffdb\006\uffdb\007\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\020\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\033\uffdb\034" +
    "\uffdb\036\uffdb\037\uffdb\042\uffdb\045\uffdb\047\uffdb\050\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\061\uffdb\001\002\000" +
    "\034\004\023\006\031\007\043\010\050\025\033\033\021" +
    "\036\036\037\024\042\034\045\041\055\025\056\022\057" +
    "\016\001\002\000\042\012\065\021\071\022\062\026\072" +
    "\031\056\032\073\040\064\041\074\042\055\043\061\044" +
    "\063\052\150\062\060\063\070\064\057\065\067\001\002" +
    "\000\064\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda\014" +
    "\uffda\015\uffda\020\uffda\024\uffda\025\uffda\027\uffda\030\uffda" +
    "\033\uffda\034\uffda\036\uffda\037\uffda\042\uffda\045\uffda\047" +
    "\uffda\050\uffda\054\uffda\055\uffda\056\uffda\057\uffda\061\uffda" +
    "\001\002\000\034\004\023\006\031\007\043\010\050\025" +
    "\033\033\021\036\036\037\024\042\034\045\041\055\025" +
    "\056\022\057\016\001\002\000\042\012\065\021\071\022" +
    "\062\026\072\031\056\032\073\040\064\041\074\042\055" +
    "\043\061\044\063\051\153\062\060\063\070\064\057\065" +
    "\067\001\002\000\056\004\023\006\031\007\043\010\040" +
    "\014\026\015\032\020\006\025\033\027\020\030\011\033" +
    "\021\034\007\036\036\037\024\042\034\045\041\050\014" +
    "\054\027\055\025\056\022\057\016\061\012\001\002\000" +
    "\064\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\014\uffdf" +
    "\015\uffdf\020\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\033" +
    "\uffdf\034\uffdf\036\uffdf\037\uffdf\042\uffdf\045\uffdf\047\uffdf" +
    "\050\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\001" +
    "\002\000\060\004\023\006\031\007\043\010\040\014\026" +
    "\015\032\020\006\025\033\027\020\030\011\033\021\034" +
    "\007\036\036\037\024\042\034\045\041\047\156\050\014" +
    "\054\027\055\025\056\022\057\016\061\012\001\002\000" +
    "\064\002\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\014\uffdc" +
    "\015\uffdc\020\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\042\uffdc\045\uffdc\047\uffdc" +
    "\050\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\061\uffdc\001" +
    "\002\000\064\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\014\uffdd\015\uffdd\020\uffdd\024\uffdd\025\uffdd\027\uffdd\030" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\042\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\061" +
    "\uffdd\001\002\000\034\004\023\006\031\007\043\010\050" +
    "\025\033\033\021\036\036\037\024\042\034\045\041\055" +
    "\025\056\022\057\016\001\002\000\042\012\065\021\071" +
    "\022\062\026\072\031\056\032\073\040\064\041\074\042" +
    "\055\043\061\044\063\052\162\062\060\063\070\064\057" +
    "\065\067\001\002\000\064\002\uffe5\004\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\014\uffe5\015\uffe5\020\uffe5\024\uffe5\025\uffe5" +
    "\027\uffe5\030\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5\042" +
    "\uffe5\045\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\061\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\017\003\001\001\000\022\014\004\015" +
    "\007\016\041\020\012\022\036\023\014\024\016\025\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\154\001\001\000\004\026\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\044\015" +
    "\137\022\046\023\014\024\016\025\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\044\015\127\022\046\023\014\024\016" +
    "\025\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\044\015\124\022\046\023\014\024\016\025\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\044\015\122\022\046\023" +
    "\014\024\016\025\034\001\001\000\002\001\001\000\004" +
    "\020\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\044\015\045\021\050\022\046\023\014\024\016\025" +
    "\034\001\001\000\002\001\001\000\004\026\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\044\015\053\022\046\023\014\024\016\025\034" +
    "\001\001\000\002\001\001\000\004\026\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\044" +
    "\015\103\022\046\023\014\024\016\025\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\044\015\074\022\046\023\014\024" +
    "\016\025\034\001\001\000\002\001\001\000\004\026\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\044\015\045\021\101\022\046\023\014" +
    "\024\016\025\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\044\015\045\021\107\022\046\023" +
    "\014\024\016\025\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\044" +
    "\015\117\022\046\023\014\024\016\025\034\001\001\000" +
    "\004\026\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\065\001\001\000\002\001\001\000\004\026" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\065\001\001\000\002\001\001\000\016\014\044\015" +
    "\132\022\046\023\014\024\016\025\034\001\001\000\004" +
    "\026\065\001\001\000\022\014\004\015\007\016\134\020" +
    "\012\022\036\023\014\024\016\025\034\001\001\000\002" +
    "\001\001\000\022\014\004\015\007\016\136\020\012\022" +
    "\036\023\014\024\016\025\034\001\001\000\002\001\001" +
    "\000\004\026\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\044\015\146\022\046\023\014\024\016\025" +
    "\034\001\001\000\004\026\065\001\001\000\002\001\001" +
    "\000\016\014\044\015\151\022\046\023\014\024\016\025" +
    "\034\001\001\000\004\026\065\001\001\000\022\014\004" +
    "\015\007\016\153\020\012\022\036\023\014\024\016\025" +
    "\034\001\001\000\002\001\001\000\022\014\004\015\007" +
    "\016\041\020\012\022\036\023\014\024\016\025\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\044" +
    "\015\160\022\046\023\014\024\016\025\034\001\001\000" +
    "\004\026\065\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= NULL 
            {
              Literal RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new LiteralNull();
		System.out.println("Reduced lit for lit = "+lit);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= FALSE 
            {
              Literal RESULT =null;
		
		RESULT = new LiteralBoolean(false);
		System.out.println("Reduced lit for lit = false ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= TRUE 
            {
              Literal RESULT =null;
		
		RESULT = new LiteralBoolean(true);
		System.out.println("Reduced lit for lit = true ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= QUOTE 
            {
              Literal RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new LiteralString(lit);
		System.out.println("Reduced lit for lit = "+lit);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= NUMBER 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = new LiteralNumber(n.intValue());
		System.out.println("Reduced lit for num. literal = "+n);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= NEQUAL 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.NEQUAL;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= EQUAL 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.EQUAL;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= LE 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LE;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= LT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= GE 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.GE;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= GT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.GT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= LOR 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LOR;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= LAND 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.LAND;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= MOD 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MOD;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= DIV 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.DIV;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= MULT 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MULT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= MINUS 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.MINUS;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= PLUS 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = Operator.PLUS;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // staticCall ::= CLASS_ID DOT VAR LPAREN args_list RPAREN 
            {
              Object RESULT =null;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallStatic(cl_id, meth_id, arguments);
	System.out.println("Reduced CallStatic. call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticCall",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // virtualCall ::= VAR LPAREN args_list RPAREN 
            {
              Object RESULT =null;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallVirtual(meth_id, arguments);
	System.out.println("Reduced CallVirtual (no instance). call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // virtualCall ::= expr DOT VAR LPAREN args_list RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int meth_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meth_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String meth_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> arguments = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new CallVirtual(e1, meth_id, arguments);
	System.out.println("Reduced CallVirtual (object instance). call details: " + RESULT.toString());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // call ::= virtualCall 
            {
              Call RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call ::= staticCall 
            {
              Call RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args_list ::= args_list COMMA expr 
            {
              List<Expr> RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> list1 = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int new_argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int new_argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr new_arg = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					// add the n-th argument
					list1.add(new_arg);
					RESULT = list1;
					System.out.println ("Reduced rule: list of arguments."
					+ "added argument: " + new_arg);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args_list ::= expr 
            {
              List<Expr> RESULT =null;
		int new_argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int new_argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr new_arg = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					// add the single argument
					List<Expr> list1 = new ArrayList <Expr>();
					list1.add(new_arg);
					RESULT = list1;
					System.out.println ("Reduced rule: one argument: " + new_arg);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // args_list ::= 
            {
              List<Expr> RESULT =null;
		 
					RESULT = new ArrayList <Expr> ();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location ::= expr LB expr RB 
            {
              Location RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int subscriptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subscriptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr subscript = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new LocationArrSubscript(arr, subscript);
			System.out.println ("reduced rule- Location Array subscript." 
			+ " Array expression: " +  arr 
			+ ", subscript expression: " + subscript) ; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= expr DOT VAR 
            {
              Location RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 			RESULT = new LocationExpressionMember(ex, v);
			System.out.println ("reduced rule- Location Expr.Member for expression: " 
			+ ex + "and member: " + v) ; 
 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // location ::= VAR 
            {
              Location RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			RESULT = new LocationId(v);
			System.out.println ("reduced rule- Location ID: " + v) ; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= READI LPAREN RPAREN 
            {
              Expr RESULT =null;
		 RESULT = new ReadIExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= literal 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LNEG expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(e1, Operator.LNEG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(e1, Operator.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOpExpr(e1, e2, op);
		   System.out.println("Reduced rule e1 "+op+" e2 for e1=" + e1 + " and e2="+e2);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ln = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new ExprBase ();
			System.out.println ("Reduced rule 'length' for expr: " + e1 ) ;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NEW type LB expr RB 
            {
              Expr RESULT =null;
		int nwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new NewVarExpr(tp.toString(), e1);
			System.out.println("Reduced rule 'new array instance'"
			+ " for type " + tp.toString() + ", " 
			+ "array size expression: " + e1.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= NEW CLASS_ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int nwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new NewVarExpr(cl_id);
			System.out.println("Reduced rule 'new' for class " + cl_id);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= THIS 
            {
              Expr RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new LocationId ("this");
			System.out.println("Reduced rule 'this' ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= call 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= location 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= type VAR ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtDeclareVar(tp, id, val);
	 System.out.println("Reduced statement: variable declaration. + init."
	 + RESULT.toString());
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= type VAR SEMI 
            {
              Stmt RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new StmtDeclareVar(tp, id);
	 System.out.println("Reduced statement: variable declaration. "
	 + RESULT.toString());
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LCBR stmt_list RCBR 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 System.out.println("Reduced statements block. ");
		 //(the list itself will be printed and returned in inner rule.)
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= CONTINUE SEMI 
            {
              Stmt RESULT =null;
		
	 RESULT = new StmtContinue();
	 System.out.println("Reduced continue;");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		
	 RESULT = new StmtBreak();
	 System.out.println("Reduced break;");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtWhile(condition, commands);
	 System.out.println("Reduced while statement.");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commands_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commands_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands_else = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtIf(condition, commands, commands_else);
	 System.out.println("Reduced if/else statement."); //TODO print details.
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr condition = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commandsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commandsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt commands = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 RESULT = new StmtIf(condition, commands);
	 System.out.println("Reduced if statemnt.");	//TODO print details.
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new ReturnExprStatement(e);
	 System.out.println("Reduced return expression for expression: "
	 + e.toString () );
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		
	 RESULT = new ReturnVoidStatement();
	 System.out.println("Reduced return;"); 
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= call SEMI 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	 RESULT = new CallStatement(c);
	 //TODO print details
	 System.out.println("Reduced call statement for call");
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= location ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr value = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new AssignStmt(loc, value);
	System.out.println("Reduced assignment stmt. assign to location: " 
	 + loc + " , assign value: " + value);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_list ::= stmt_list stmt 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		sl.add(s);
		RESULT = sl;
		System.out.println("reduced list of statements. new statement: "
		+ s ); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_list ::= 
            {
              List<Stmt> RESULT =null;
		
		RESULT = new ArrayList<Stmt>(); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		 	RESULT = new TypeArray(tp);
			System.out.println("Reduced rule 'type array' of type " + tp);	
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cl_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cl_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Type (cl_id);
			System.out.println("Reduced rule 'class type': " + cl_id);
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= STRING 
            {
              Type RESULT =null;
		
			RESULT = new Type ("string");
			System.out.println("Reduced rule 'string' ");
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		
			RESULT = new Type ("boolean");
			System.out.println("Reduced rule 'boolean' ");
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              Type RESULT =null;
		
			RESULT = new Type ("int");
			System.out.println("Reduced rule 'int' ");
						
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formalList ::= formalList COMMA formal 
            {
              FormalsList RESULT =null;
		int fListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalsList fList = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int frmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int frmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal frm = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			fList.addFrml(frm); 
			RESULT = fList; 
			System.out.println("Reduced rule 'formals COMMA type VAR' ");
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formalList ::= formal 
            {
              FormalsList RESULT =null;
		int frmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int frmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal frm = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new FormalsList(frm);
			System.out.println("Reduced rule 'formals list' single formal ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal ::= type VAR 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT=new Formal (t, new LocationId(v));
		System.out.println("Reduced rule 'formal' "); //TODO add details
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDecl ::= VOID VAR LPAREN formalList RPAREN LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FormalsList frmls = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> slist = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new Method (null, frmls, slist);
			System.out.println("Reduced rule for method decl. VOID id:method_name LPAREN formalList RPAREN LCBR RCBR");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDecl ::= formal LPAREN formalList RPAREN LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		FormalsList frmls = (FormalsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> slist = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new Method (f, frmls, slist);
			System.out.println("Reduced rule 'STATIC typeVoid:tv VAR:method_name LPAREN formals:frmls RPAREN LCBR stmt_list:slist RCBR' ");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= methodDecl 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	m.isStatic=false; RESULT=m;
	System.out.println("Reduced rule 'methodDecl'");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= STATIC methodDecl 
            {
              Method RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	m.isStatic=true; RESULT=m;
	System.out.println("Reduced rule 'STATIC methodDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idList ::= VAR 
            {
              List<LocationId> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		List l= new ArrayList<LocationId>();
		l.add (new LocationId(v));
		RESULT=l;
		System.out.println("Reduced rule ' VAR'");		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idList ::= idList COMMA VAR 
            {
              List<LocationId> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<LocationId> idl = (List<LocationId>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	idl.add(new LocationId(v)); RESULT= idl;
	System.out.println("Reduced rule 'idList COMMA VAR'");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= type idList SEMI 
            {
              Field RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<LocationId> idl = (List<LocationId>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT= new Field(t, idl);
	System.out.println("Reduced rule 'type idList SEMI' ");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldMethodList ::= method 
            {
              FieldMethodList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new FieldMethodList(m);
		 	System.out.println("Reduced rule: method"); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldMethodList ::= field 
            {
              FieldMethodList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new FieldMethodList(f);
		 	System.out.println("Reduced rule: field");
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldMethodList ::= method fieldMethodList 
            {
              FieldMethodList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldMethodList fmList = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				fmList.addFieldMethod(m); RESULT = fmList; 
				System.out.println("Reduced rule: method fieldMethodList");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldMethodList ::= field fieldMethodList 
            {
              FieldMethodList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldMethodList fmList = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				fmList.addFieldMethod(f); RESULT = fmList; 
				System.out.println("Reduced rule: field fieldMethodList");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldMethodList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR 
            {
              Class RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ecidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ecidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ecid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fml = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT= new Class (cid, ecid, fml);
				System.out.println("Reduced rule: CLASS CLASS_ID EXTENDS CLASS_ID LCBR fieldMethodList RCBR");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR fieldMethodList RCBR 
            {
              Class RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fml = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT= new Class (cid, fml);
				System.out.println("Reduced rule: CLASS CLASS_ID LCBR fieldMethodList RCBR");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= classDecl 
            {
              List<Class> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Class c = (Class)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		List <Class> l= new ArrayList<Class> ();
		l.add(c);
		RESULT=l;
		System.out.println("Reduced rule 'classDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= classDeclList classDecl 
            {
              List<Class> RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Class> cdl = (List<Class>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Class cd = (Class)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	cdl.add(cd); RESULT= cdl;
	System.out.println("Reduced rule 'classDeclList COMMA classDecl'");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              List<Class> RESULT =null;
		
	System.out.println("Reduced rule '' (empty program");
	RESULT= new ArrayList<Class>();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= classDeclList 
            {
              List<Class> RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Class> cdl = (List<Class>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	System.out.println("Reduced rule 'classDeclList'");
	RESULT= cdl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> start_val = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

