package slp;

import java_cup.runtime.*;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};

terminal LPAREN, RPAREN, SEMI, ASSIGN;
terminal Operator PLUS, MINUS, MULT, DIV, GT, LT, GE, LE, LAND, LOR;
terminal READI, PRINT;
terminal Integer NUMBER;
terminal String VAR;
terminal UMINUS;

non terminal Operator binop;
non terminal Expr expr;
non terminal Stmt stmt;
non terminal StmtList stmt_list;

precedence left ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left UMINUS;
precedence left GT, LT, GE, LE;

stmt_list ::= stmt:s
	{: RESULT = new StmtList(s); :}
	| stmt_list:sl stmt:s
	{: sl.addStmt(s); RESULT = sl; :}
;

stmt ::= VAR:v ASSIGN expr:e SEMI
	{: VarExpr ve = new VarExpr(v); 
	   RESULT = new AssignStmt(ve, e);
	   System.out.println("v=e: v=" + v + " e=" + e);
    :}
	| PRINT LPAREN expr:e RPAREN SEMI
	{: RESULT = new PrintStmt(e);
	   System.out.println("print(e): e=" + e);
    :}
;

expr ::= expr:e1 binop:op expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, op);
		   System.out.println("Reduced rule e1 " + op + " e2 for e1=" + e1 + " and e2="+e2);
   	    :}
		| MINUS expr:e
		{: RESULT = new UnaryOpExpr(e, Operator.MINUS); 
		   System.out.println("Reduced rule -e: e=" + e);
   	    :} %prec UMINUS
		| LPAREN expr:e RPAREN
		{: RESULT = e;  
		   System.out.println("Reduced rule (e): e=" + e);
   	    :}
		| NUMBER:n
		{: RESULT = new NumberExpr(n.intValue());
		   System.out.println("Reduced rule NUMBER: " + n);
   	    :}
		| READI LPAREN RPAREN
		{: RESULT = new ReadIExpr();
		   System.out.println("Reduced rule READI()");
   	    :}
		| VAR:v
		{: RESULT = new VarExpr(v);
		   System.out.println("Reduced rule VAR:" + v);
   	    :}
;

binop ::= PLUS 	{: RESULT=Operator.PLUS; :}
		| MINUS {: RESULT=Operator.MINUS; :}
		| MULT 	{: RESULT=Operator.MULT; :}
		| DIV	{: RESULT=Operator.DIV; :}
		| LAND 	{: RESULT=Operator.LAND; :}
		| LOR 	{: RESULT=Operator.LOR; :}
		| LT 	{: RESULT=Operator.LT; :}
		| GT 	{: RESULT=Operator.GT; :}
		| LE 	{: RESULT=Operator.LE; :}
		| GE 	{: RESULT=Operator.GE; :}
		;